///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : katech.cpp
/// SOFTWARE COMPONENT NAME           : KATECH
/// GENERATED DATE                    : 2025-07-18 17:10:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "katech/aa/katech.h"
 
namespace katech
{
namespace aa
{
 
KATECH::KATECH()
    : m_logger(ara::log::CreateLogger("KATC", "SWC", ara::log::LogLevel::kInfo))
    , m_running{false}
    , m_workers(10)
{
}
 
KATECH::~KATECH()
{
}
 
bool KATECH::Initialize()
{
    m_logger.LogInfo() << "KATECH::Initialize";
    
    bool init = true;
    
    m_RPortRearCurtain = std::make_unique<katech::aa::port::RPortRearCurtain>();
    m_RPortRoa = std::make_unique<katech::aa::port::RPortRoa>();
    m_RPortSubscriptionManagement = std::make_unique<katech::aa::port::RPortSubscriptionManagement>();
    
    // put your code for initialization
    
    return init;
}
 
void KATECH::Start()
{
    m_logger.LogInfo() << "KATECH::Start";
    
    m_RPortRearCurtain->Start();
    m_RPortRoa->Start();
    m_RPortSubscriptionManagement->Start();
}
 
void KATECH::Terminate()
{
    m_logger.LogInfo() << "KATECH::Terminate";
    
    // stop running
    m_running = false;
    
    m_RPortRearCurtain->Terminate();
    m_RPortRoa->Terminate();
    m_RPortSubscriptionManagement->Terminate();
}
 
void KATECH::Run()
{
    m_logger.LogInfo() << "KATECH::Run";
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_RPortRearCurtain->ReceiveFieldsoaRctnStatusCyclic(); });
    m_workers.Async([this] { m_RPortRearCurtain->ReceiveFieldsoaRctnSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaDetectCountCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaDetectStateCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaModeCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaRunningStateCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaSensorErrorCyclic(); });
    m_workers.Async([this] { m_RPortRoa->ReceiveFieldsoaRoaSwVersionCyclic(); });
    m_workers.Async([this] { m_RPortSubscriptionManagement->ReceiveEventnotifySubscriptionInfoCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace katech
