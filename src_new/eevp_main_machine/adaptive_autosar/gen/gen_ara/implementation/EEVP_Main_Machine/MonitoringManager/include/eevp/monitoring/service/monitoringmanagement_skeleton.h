///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, ARA::COM Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : monitoringmanagement_skeleton.h
/// SERVICE INTERFACE NAME            : MonitoringManagement
/// GENERATED DATE                    : 2024-07-19 07:35:26
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// CAUTION!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT                                                   
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_COM_GEN_SERVICE_INTERFACE_MONITORINGMANAGEMENT_SKELETON_H
#define PARA_COM_GEN_SERVICE_INTERFACE_MONITORINGMANAGEMENT_SKELETON_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @uptrace{SWS_CM_01004}
#include "monitoringmanagement_common.h"
#include "para/com/skeleton/skeleton_interface.h"
/// @uptrace{SWS_CM_01005}
namespace eevp
{
namespace monitoring
{
namespace service
{
/// @uptrace{SWS_CM_01006}
namespace skeleton
{
class MonitoringManagementSkeleton;
/// @uptrace{SWS_CM_01009}
namespace events
{
/// @uptrace{SWS_CM_00003}
class eventServiceError
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::ControllerServiceErrorEvent;
    /// @brief Constructor
    explicit eventServiceError(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~eventServiceError() = default;
    /// @brief Delete copy constructor
    eventServiceError(const eventServiceError& other) = delete;
    /// @brief Delete copy assignment
    eventServiceError& operator=(const eventServiceError& other) = delete;
    /// @brief Move constructor
    eventServiceError(eventServiceError&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    eventServiceError& operator=(eventServiceError&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }
    
private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"eventServiceError"};
};
/// @uptrace{SWS_CM_00003}
class eventServiceInfo
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::ControllerServiceInfoMap;
    /// @brief Constructor
    explicit eventServiceInfo(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~eventServiceInfo() = default;
    /// @brief Delete copy constructor
    eventServiceInfo(const eventServiceInfo& other) = delete;
    /// @brief Delete copy assignment
    eventServiceInfo& operator=(const eventServiceInfo& other) = delete;
    /// @brief Move constructor
    eventServiceInfo(eventServiceInfo&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    eventServiceInfo& operator=(eventServiceInfo&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }
    
private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"eventServiceInfo"};
};
/// @uptrace{SWS_CM_00003}
class eventServiceInfoSpare
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::ControllerServiceInfoSpare;
    /// @brief Constructor
    explicit eventServiceInfoSpare(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~eventServiceInfoSpare() = default;
    /// @brief Delete copy constructor
    eventServiceInfoSpare(const eventServiceInfoSpare& other) = delete;
    /// @brief Delete copy assignment
    eventServiceInfoSpare& operator=(const eventServiceInfoSpare& other) = delete;
    /// @brief Move constructor
    eventServiceInfoSpare(eventServiceInfoSpare&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    eventServiceInfoSpare& operator=(eventServiceInfoSpare&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }
    
private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"eventServiceInfoSpare"};
};
/// @uptrace{SWS_CM_00003}
class eventServiceStatus
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::ControllerServiceStatusMap;
    /// @brief Constructor
    explicit eventServiceStatus(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~eventServiceStatus() = default;
    /// @brief Delete copy constructor
    eventServiceStatus(const eventServiceStatus& other) = delete;
    /// @brief Delete copy assignment
    eventServiceStatus& operator=(const eventServiceStatus& other) = delete;
    /// @brief Move constructor
    eventServiceStatus(eventServiceStatus&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    eventServiceStatus& operator=(eventServiceStatus&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }
    
private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"eventServiceStatus"};
};
/// @uptrace{SWS_CM_00003}
class eventServiceStatusSpare
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::ControllerServiceStatusSpare;
    /// @brief Constructor
    explicit eventServiceStatusSpare(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~eventServiceStatusSpare() = default;
    /// @brief Delete copy constructor
    eventServiceStatusSpare(const eventServiceStatusSpare& other) = delete;
    /// @brief Delete copy assignment
    eventServiceStatusSpare& operator=(const eventServiceStatusSpare& other) = delete;
    /// @brief Move constructor
    eventServiceStatusSpare(eventServiceStatusSpare&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    eventServiceStatusSpare& operator=(eventServiceStatusSpare&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }
    
private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"eventServiceStatusSpare"};
};
/// @uptrace{SWS_CM_00003}
class eventUpdatableService
{
public:
    /// @brief Type alias for type of event data
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using SampleType = eevp::monitoring::type::UpdatableServiceList;
    /// @brief Constructor
    explicit eventUpdatableService(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~eventUpdatableService() = default;
    /// @brief Delete copy constructor
    eventUpdatableService(const eventUpdatableService& other) = delete;
    /// @brief Delete copy assignment
    eventUpdatableService& operator=(const eventUpdatableService& other) = delete;
    /// @brief Move constructor
    eventUpdatableService(eventUpdatableService&& other) noexcept : mInterface(other.mInterface)
    {
    }
    /// @brief Move assignment
    eventUpdatableService& operator=(eventUpdatableService&& other) noexcept
    {
        mInterface = other.mInterface;
        return *this;
    }
    /// @brief Send event with data to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Send(const SampleType& data)
    {
        para::serializer::Serializer serializer{};
        serializer.write(data);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kCallSign, payload);
    }
    /// @brief Returns unique pointer about SampleType
    /// @uptrace{SWS_CM_90438}
    ara::core::Result<ara::com::SampleAllocateePtr<SampleType>> Allocate()
    {
        return std::make_unique<SampleType>();
    }
    
private:
    para::com::SkeletonInterface* mInterface;
    const std::string kCallSign = {"eventUpdatableService"};
};
} /// namespace events
/// @uptrace{SWS_CM_01031}
namespace fields
{
} /// namespace fields
/// @uptrace{SWS_CM_00002}
class MonitoringManagementSkeleton
{
public:
    /// @uptrace{SWS_CM_00191}
    struct requestAppInstallOutput
    {
        bool returnValue;
    };
    struct requestAppUpdateOutput
    {
        bool returnValue;
    };
    struct requestControllerServiceInfoOutput
    {
        eevp::monitoring::type::ControllerServiceInfo controllerServiceInfo;
        bool returnValue;
    };
    struct requestControllerServiceInfoAllOutput
    {
        eevp::monitoring::type::ControllerServiceInfoMap controllerServiceInfoMap;
        bool returnValue;
    };
    struct requestControllerServiceInfoAllSpareOutput
    {
        eevp::monitoring::type::StringArray serviceName;
        eevp::monitoring::type::StringArray version;
        eevp::monitoring::type::TimeArray lastUpdateTime;
    };
    struct requestControllerServiceStatusOutput
    {
        eevp::type::String controllerServiceStatus;
        bool returnValue;
    };
    struct requestControllerServiceStatusAllOutput
    {
        eevp::monitoring::type::ControllerServiceStatusMap controllerServiceStatusMap;
        bool returnValue;
    };
    struct requestControllerServiceStatusAllSpareOutput
    {
        eevp::monitoring::type::StringArray serviceName;
        eevp::monitoring::type::StringArray serviceStatus;
        eevp::monitoring::type::StringArray serviceEnable;
        eevp::monitoring::type::StringArray serviceControl;
    };
    struct resetUcmTestOutput
    {
    };
    struct setControlControllerServiceOutput
    {
        bool returnValue;
    };
    struct setEnableControllerServiceOutput
    {
        bool returnValue;
    };
    /// @brief Constructor
    /// @uptrace{SWS_CM_00002, SWS_CM_00152}
    MonitoringManagementSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent)
        : mInterface(std::make_unique<para::com::SkeletonInterface>(instanceSpec, mode))
        , eventServiceError(mInterface.get())
        , eventServiceInfo(mInterface.get())
        , eventServiceInfoSpare(mInterface.get())
        , eventServiceStatus(mInterface.get())
        , eventServiceStatusSpare(mInterface.get())
        , eventUpdatableService(mInterface.get())
    {
        mInterface->SetMethodCallHandler(krequestAppInstallCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppInstall(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppUpdateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppUpdate(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfo(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoAllCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfoAll(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoAllSpareCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfoAllSpare(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatus(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusAllCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatusAll(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusAllSpareCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatusAllSpare(data, token);
        });
        mInterface->SetMethodCallHandler(kresetUcmTestCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleresetUcmTest(data, token);
        });
        mInterface->SetMethodCallHandler(ksetControlControllerServiceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlesetControlControllerService(data, token);
        });
        mInterface->SetMethodCallHandler(ksetEnableControllerServiceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlesetEnableControllerService(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
    }
    /// @brief Destructor
    virtual ~MonitoringManagementSkeleton() = default;
    /// @brief Delete copy constructor
    /// @uptrace{SWS_CM_00134}
    MonitoringManagementSkeleton(const MonitoringManagementSkeleton& other) = delete;
    /// @brief Delete copy assignment
    /// @uptrace{SWS_CM_00134}
    MonitoringManagementSkeleton& operator=(const MonitoringManagementSkeleton& other) = delete;
    /// @brief Move constructor
    /// @uptrace{SWS_CM_00135}
    MonitoringManagementSkeleton(MonitoringManagementSkeleton&& other) noexcept
        : mInterface(std::move(other.mInterface))
        , eventServiceError(std::move(other.eventServiceError))
        , eventServiceInfo(std::move(other.eventServiceInfo))
        , eventServiceInfoSpare(std::move(other.eventServiceInfoSpare))
        , eventServiceStatus(std::move(other.eventServiceStatus))
        , eventServiceStatusSpare(std::move(other.eventServiceStatusSpare))
        , eventUpdatableService(std::move(other.eventUpdatableService))
    {
        mInterface->SetMethodCallHandler(krequestAppInstallCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppInstall(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppUpdateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppUpdate(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfo(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoAllCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfoAll(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoAllSpareCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfoAllSpare(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatus(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusAllCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatusAll(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusAllSpareCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatusAllSpare(data, token);
        });
        mInterface->SetMethodCallHandler(kresetUcmTestCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleresetUcmTest(data, token);
        });
        mInterface->SetMethodCallHandler(ksetControlControllerServiceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlesetControlControllerService(data, token);
        });
        mInterface->SetMethodCallHandler(ksetEnableControllerServiceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlesetEnableControllerService(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
    }
    /// @brief Move assignment
    /// @uptrace{SWS_CM_00135}
    MonitoringManagementSkeleton& operator=(MonitoringManagementSkeleton&& other) noexcept
    {
        mInterface = std::move(other.mInterface);
        eventServiceError = std::move(other.eventServiceError);
        eventServiceInfo = std::move(other.eventServiceInfo);
        eventServiceInfoSpare = std::move(other.eventServiceInfoSpare);
        eventServiceStatus = std::move(other.eventServiceStatus);
        eventServiceStatusSpare = std::move(other.eventServiceStatusSpare);
        eventUpdatableService = std::move(other.eventUpdatableService);
        mInterface->SetMethodCallHandler(krequestAppInstallCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppInstall(data, token);
        });
        mInterface->SetMethodCallHandler(krequestAppUpdateCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestAppUpdate(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfo(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoAllCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfoAll(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceInfoAllSpareCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceInfoAllSpare(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatus(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusAllCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatusAll(data, token);
        });
        mInterface->SetMethodCallHandler(krequestControllerServiceStatusAllSpareCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlerequestControllerServiceStatusAllSpare(data, token);
        });
        mInterface->SetMethodCallHandler(kresetUcmTestCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandleresetUcmTest(data, token);
        });
        mInterface->SetMethodCallHandler(ksetControlControllerServiceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlesetControlControllerService(data, token);
        });
        mInterface->SetMethodCallHandler(ksetEnableControllerServiceCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
            HandlesetEnableControllerService(data, token);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
        return *this;
    }
    /// @brief Send "OfferService" message to Communication Management
    /// @uptrace{SWS_CM_00101}
    ara::core::Result<void> OfferService()
    {
        return mInterface->OfferService();
    }
    /// @brief Send "StopOfferService" message to Communication Management
    /// @uptrace{SWS_CM_00111}
    void StopOfferService()
    {
        mInterface->StopOfferService();
    }
    /// @brief Allows the implementation providing the service method to trigger the execution of the next service consumer method call at a specific point of time
    ///        if the processing mode is set to kPoll.
    /// @note This function requires that ara::com::MethodCallProcessingMode is configured as kPoll by constructor
    /// @uptrace{SWS_CM_00199}
    ara::core::Future<bool> ProcessNextMethodCall()
    {
        ara::core::Promise<bool> promise{};
        auto ret = mInterface->ProcessNextMethodCall();
        if (ret.HasValue())
        {
            promise.set_value(ret.Value());
        }
        else
        {
            promise.SetError(ret.Error());
        }
        return promise.get_future();
    }
    /// @brief In case the call to E2E_check indicated a failed E2E check of the request message, the server application can get notified via an E2E error handler.
    /// @uptrace{SWS_CM_10470}
    virtual void E2EErrorHandler(const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter)
    {
    }
    
private:
    std::unique_ptr<para::com::SkeletonInterface> mInterface;
    
public:
    /// @brief Event, eventServiceError
    events::eventServiceError eventServiceError;
    /// @brief Event, eventServiceInfo
    events::eventServiceInfo eventServiceInfo;
    /// @brief Event, eventServiceInfoSpare
    events::eventServiceInfoSpare eventServiceInfoSpare;
    /// @brief Event, eventServiceStatus
    events::eventServiceStatus eventServiceStatus;
    /// @brief Event, eventServiceStatusSpare
    events::eventServiceStatusSpare eventServiceStatusSpare;
    /// @brief Event, eventUpdatableService
    events::eventUpdatableService eventUpdatableService;
    /// @brief Method, requestAppInstall
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestAppInstallOutput> requestAppInstall(const eevp::type::String& controllerServiceName) = 0;
    /// @brief Method, requestAppUpdate
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestAppUpdateOutput> requestAppUpdate(const eevp::type::String& controllerServiceName) = 0;
    /// @brief Method, requestControllerServiceInfo
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestControllerServiceInfoOutput> requestControllerServiceInfo(const eevp::type::String& controllerServiceName) = 0;
    /// @brief Method, requestControllerServiceInfoAll
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestControllerServiceInfoAllOutput> requestControllerServiceInfoAll() = 0;
    /// @brief Method, requestControllerServiceInfoAllSpare
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestControllerServiceInfoAllSpareOutput> requestControllerServiceInfoAllSpare() = 0;
    /// @brief Method, requestControllerServiceStatus
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestControllerServiceStatusOutput> requestControllerServiceStatus(const eevp::type::String& controllerServiceName) = 0;
    /// @brief Method, requestControllerServiceStatusAll
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestControllerServiceStatusAllOutput> requestControllerServiceStatusAll() = 0;
    /// @brief Method, requestControllerServiceStatusAllSpare
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<requestControllerServiceStatusAllSpareOutput> requestControllerServiceStatusAllSpare() = 0;
    /// @brief Method, resetUcmTest
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<resetUcmTestOutput> resetUcmTest() = 0;
    /// @brief Method, setControlControllerService
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<setControlControllerServiceOutput> setControlControllerService(const eevp::type::String& serviceName, const eevp::type::String& serviceControl) = 0;
    /// @brief Method, setEnableControllerService
    /// @uptrace{SWS_CM_00191}
    virtual ara::core::Future<setEnableControllerServiceOutput> setEnableControllerService(const eevp::type::String& controllerServiceName, const eevp::type::String& enable) = 0;
    
private:
    void HandlerequestAppInstall(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _controllerServiceName_;
        deserializer.read(_controllerServiceName_);
        auto future = requestAppInstall(_controllerServiceName_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestAppInstallOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestAppInstallCallSign, retResult, retData, token);
    }
    void HandlerequestAppUpdate(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _controllerServiceName_;
        deserializer.read(_controllerServiceName_);
        auto future = requestAppUpdate(_controllerServiceName_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestAppUpdateOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestAppUpdateCallSign, retResult, retData, token);
    }
    void HandlerequestControllerServiceInfo(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _controllerServiceName_;
        deserializer.read(_controllerServiceName_);
        auto future = requestControllerServiceInfo(_controllerServiceName_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestControllerServiceInfoOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.controllerServiceInfo);
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestControllerServiceInfoCallSign, retResult, retData, token);
    }
    void HandlerequestControllerServiceInfoAll(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = requestControllerServiceInfoAll();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestControllerServiceInfoAllOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.controllerServiceInfoMap);
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestControllerServiceInfoAllCallSign, retResult, retData, token);
    }
    void HandlerequestControllerServiceInfoAllSpare(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = requestControllerServiceInfoAllSpare();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestControllerServiceInfoAllSpareOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.serviceName);
            serializer.write(output.version);
            serializer.write(output.lastUpdateTime);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestControllerServiceInfoAllSpareCallSign, retResult, retData, token);
    }
    void HandlerequestControllerServiceStatus(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _controllerServiceName_;
        deserializer.read(_controllerServiceName_);
        auto future = requestControllerServiceStatus(_controllerServiceName_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestControllerServiceStatusOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.controllerServiceStatus);
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestControllerServiceStatusCallSign, retResult, retData, token);
    }
    void HandlerequestControllerServiceStatusAll(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = requestControllerServiceStatusAll();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestControllerServiceStatusAllOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.controllerServiceStatusMap);
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestControllerServiceStatusAllCallSign, retResult, retData, token);
    }
    void HandlerequestControllerServiceStatusAllSpare(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = requestControllerServiceStatusAllSpare();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            requestControllerServiceStatusAllSpareOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.serviceName);
            serializer.write(output.serviceStatus);
            serializer.write(output.serviceEnable);
            serializer.write(output.serviceControl);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(krequestControllerServiceStatusAllSpareCallSign, retResult, retData, token);
    }
    void HandleresetUcmTest(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = resetUcmTest();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kresetUcmTestCallSign, retResult, retData, token);
    }
    void HandlesetControlControllerService(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _serviceName_;
        eevp::type::String _serviceControl_;
        deserializer.read(_serviceName_);
        deserializer.read(_serviceControl_);
        auto future = setControlControllerService(_serviceName_, _serviceControl_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            setControlControllerServiceOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(ksetControlControllerServiceCallSign, retResult, retData, token);
    }
    void HandlesetEnableControllerService(const std::vector<std::uint8_t>& data, const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        eevp::type::String _controllerServiceName_;
        eevp::type::String _enable_;
        deserializer.read(_controllerServiceName_);
        deserializer.read(_enable_);
        auto future = setEnableControllerService(_controllerServiceName_, _enable_);
        auto result = future.GetResult();
        if (result.HasValue())
        {
            setEnableControllerServiceOutput output = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(output.returnValue);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(ksetEnableControllerServiceCallSign, retResult, retData, token);
    }
    const std::string krequestAppInstallCallSign{"requestAppInstall"};
    const std::string krequestAppUpdateCallSign{"requestAppUpdate"};
    const std::string krequestControllerServiceInfoCallSign{"requestControllerServiceInfo"};
    const std::string krequestControllerServiceInfoAllCallSign{"requestControllerServiceInfoAll"};
    const std::string krequestControllerServiceInfoAllSpareCallSign{"requestControllerServiceInfoAllSpare"};
    const std::string krequestControllerServiceStatusCallSign{"requestControllerServiceStatus"};
    const std::string krequestControllerServiceStatusAllCallSign{"requestControllerServiceStatusAll"};
    const std::string krequestControllerServiceStatusAllSpareCallSign{"requestControllerServiceStatusAllSpare"};
    const std::string kresetUcmTestCallSign{"resetUcmTest"};
    const std::string ksetControlControllerServiceCallSign{"setControlControllerService"};
    const std::string ksetEnableControllerServiceCallSign{"setEnableControllerService"};
};
} /// namespace skeleton
} /// namespace service
} /// namespace monitoring
} /// namespace eevp
#endif /// PARA_COM_GEN_SERVICE_INTERFACE_MONITORINGMANAGEMENT_SKELETON_H