///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : consumer.cpp
/// SOFTWARE COMPONENT NAME           : Consumer
/// GENERATED DATE                    : 2024-09-10 13:37:03
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "consumer/aa/consumer.h"
#include "lotte/service/lotteservice_proxy.h"
#include "lotte/type/impl_type_dmsgzdtctn.h"
#include "lotte/type/impl_type_sidetransparency.h"
#include <chrono>
 
namespace consumer
{
namespace aa
{
 
Consumer::Consumer()
    : m_logger(ara::log::CreateLogger("COSM", "SWC", ara::log::LogLevel::kInfo))
    , m_running{false}
    , m_workers(1)
    , initTransparency(1)
{
}
 
Consumer::~Consumer()
{
}
 
bool Consumer::Initialize()
{
    m_logger.LogVerbose() << "Consumer::Initialize";
    bool init = true;
    
    m_RPort = std::make_unique<consumer::aa::port::RPort>();
    
    return init;
}
 
void Consumer::Start()
{
    m_logger.LogVerbose() << "Consumer::Start";
    
    m_RPort->Start();
}
 
void Consumer::Terminate()
{
    m_logger.LogVerbose() << "Consumer::Terminate";
    
    // stop running
    m_running = false;
    
    m_RPort->Terminate();
}
 
void Consumer::Run()
{
    m_logger.LogVerbose() << "Consumer::Run";
    
    // start running
    m_running = true;

    m_workers.Async([this] {

        while(!(m_RPort->RequestDmsStatus() && m_RPort->RequestSmartFilmStatus())){
            m_logger.LogVerbose() << "Dms Status, SmartFilm Status Init FAILED";
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
        lotte::type::SideTransparency initSideTransparency = (m_RPort->RequestSmartFilmCurr(2));
        initTransparency = initSideTransparency.currTransparency;
        lotte::type::SideTransparency driverSideTransparency = { false, 2, initTransparency,initTransparency,0};
        lotte::type::SideTransparency passengerSideTransparency = { false, 2, initTransparency,initTransparency,0};
        lotte::type::SideTransparency backMirrorSideTransparency = { false, 2, initTransparency,initTransparency,0};

        while (m_running)
        {
            lotte::type::DmsGzDtctn dmsGzDtctn = (m_RPort->RequestDmsCurr());
            // m_logger.LogVerbose() << "GazeZone : " << dmsGzDtctn.gazeZoneToString();
            switch (dmsGzDtctn.gazeZone) {
                case lotte::type::GazaZone::FRONT_WINDSHIELD :
                    driverSideTransparency.remainingTime -= 10;
                    passengerSideTransparency.remainingTime -= 10;
                    backMirrorSideTransparency.remainingTime -= 10;
                    m_logger.LogVerbose() << "EYES ON FRONT_WINDSHIELD";
                    break;
                case lotte::type::GazaZone::DRIVER_SIDE_MIRROR :
                    if(driverSideTransparency.isChanged){
                        driverSideTransparency.remainingTime = 10000;
                    }else{
                        m_RPort->RequestSmartFilmControl(2, 100);
                        driverSideTransparency.remainingTime = 10000;
                        driverSideTransparency.isChanged = true;
                        driverSideTransparency.currTransparency = 100;
                    }
                    passengerSideTransparency.remainingTime -= 10;
                    backMirrorSideTransparency.remainingTime -= 10;
                    m_logger.LogVerbose() << "EYES ON DRIVER_SIDE_MIRROR";
                    break;
                case lotte::type::GazaZone::PASSENGER_SIDE_MIRROR :
                    m_RPort->RequestSmartFilmControl(3, 100);
                    driverSideTransparency.remainingTime -= 10;
                    if(passengerSideTransparency.isChanged){
                        passengerSideTransparency.remainingTime = 10000;
                    }else{
                        m_RPort->RequestSmartFilmControl(3, 100);
                        passengerSideTransparency.remainingTime = 10000;
                        passengerSideTransparency.isChanged = true;
                        passengerSideTransparency.currTransparency = 100;
                    }
                    backMirrorSideTransparency.remainingTime -= 10;
                    m_logger.LogVerbose() << "EYES ON PASSENGER_SIDE_MIRROR";
                    break;
                case lotte::type::GazaZone::BACK_MIRROR :
                    m_RPort->RequestSmartFilmControl(4, 100);
                    driverSideTransparency.remainingTime -= 10;
                    passengerSideTransparency.remainingTime -= 10;
                    if(backMirrorSideTransparency.isChanged){
                        backMirrorSideTransparency.remainingTime = 10000;
                    }else{
                        m_RPort->RequestSmartFilmControl(4, 100);
                        backMirrorSideTransparency.remainingTime = 10000;
                        backMirrorSideTransparency.isChanged = true;
                        backMirrorSideTransparency.currTransparency = 100;
                    }
                    m_logger.LogVerbose() << "EYES ON BACK_MIRROR";
                    break;
                default:
                    // m_logger.LogVerbose() << "GAZE ZONE DEFAULT : " << dmsGzDtctn.gazeZoneToString();
                    break;
            }
            if(driverSideTransparency.remainingTime <= 0){
                m_RPort->RequestSmartFilmControl(2, initTransparency);
                driverSideTransparency.currTransparency = initTransparency;
                driverSideTransparency.remainingTime = 0;
                driverSideTransparency.isChanged = false;
            }
            if(passengerSideTransparency.remainingTime <= 0){
                m_RPort->RequestSmartFilmControl(3, initTransparency);
                passengerSideTransparency.currTransparency = initTransparency;
                passengerSideTransparency.remainingTime = 0;
                passengerSideTransparency.isChanged = false;
            }
            if(backMirrorSideTransparency.remainingTime <= 0){
                m_RPort->RequestSmartFilmControl(4, initTransparency);
                backMirrorSideTransparency.currTransparency = initTransparency;
                backMirrorSideTransparency.remainingTime = 0;
                backMirrorSideTransparency.isChanged = false;
            }
            // m_logger.LogInfo() << "DRIVER : " << driverSideTransparency.currTransparency << ", PASSENGER : " << passengerSideTransparency.currTransparency
            //                 << "BACK MIRROR : " << backMirrorSideTransparency.currTransparency;
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
    });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace consumer
