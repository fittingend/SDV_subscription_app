///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport.h
/// SOFTWARE COMPONENT NAME           : RPort
/// GENERATED DATE                    : 2024-09-10 13:37:03
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_CONSUMER_AA_RPORT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_CONSUMER_AA_RPORT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "lotte/service/lotteservice_proxy.h"
 
#include "ara/log/logger.h"
 
#include <ara/core/future.h>
#include <mutex>
#include <thread>
 
namespace consumer
{
namespace aa
{
namespace port
{
 
class RPort
{
public:
    /// @brief Constructor
    RPort();
    
    /// @brief Destructor
    ~RPort();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Request with Response method using by software component, DmsCurr
    lotte::type::DmsGzDtctn RequestDmsCurr();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerDmsCurr(std::function<void(const lotte::service::proxy::methods::DmsCurr::Output&)> handler);
    
    /// @brief Request with Response method using by software component, DmsStatus
    bool RequestDmsStatus();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerDmsStatus(std::function<void(const lotte::service::proxy::methods::DmsStatus::Output&)> handler);
    
    /// @brief Request with Response method using by software component, SmartFilmControl
    void RequestSmartFilmControl(const std::int32_t& windowLoc, const std::int32_t& transparence);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerSmartFilmControl(std::function<void(const lotte::service::proxy::methods::SmartFilmControl::Output&)> handler);
    
    /// @brief Request with Response method using by software component, SmartFilmStatus
    bool RequestSmartFilmStatus();
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerSmartFilmStatus(std::function<void(const lotte::service::proxy::methods::SmartFilmStatus::Output&)> handler);
    
    /// @brief Request with Response method using by software component, SmartFilmCurr
    lotte::type::SideTransparency RequestSmartFilmCurr(const std::uint8_t& windowLoc);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerSmartFilmCurr(std::function<void(const lotte::service::proxy::methods::SmartFilmCurr::Output&)> handler);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<lotte::service::proxy::LotteServiceProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<lotte::service::proxy::LotteServiceProxy> m_interface;
    
    /// @brief Find service handle
    std::shared_ptr<ara::com::FindServiceHandle> m_findHandle;
    
    
    
    /// @brief Callback from software component, DmsCurr
    std::function<void(const lotte::service::proxy::methods::DmsCurr::Output&)> m_responderDmsCurr;
    
    /// @brief Callback from software component, DmsStatus
    std::function<void(const lotte::service::proxy::methods::DmsStatus::Output&)> m_responderDmsStatus;
    
    /// @brief Callback from software component, SmartFilmControl
    std::function<void(const lotte::service::proxy::methods::SmartFilmControl::Output&)> m_responderSmartFilmControl;
    
    /// @brief Callback from software component, SmartFilmStatus
    std::function<void(const lotte::service::proxy::methods::SmartFilmStatus::Output&)> m_responderSmartFilmStatus;
    
    /// @brief Callback from software component, SmartFilmCurr
    std::function<void(const lotte::service::proxy::methods::SmartFilmCurr::Output&)> m_responderSmartFilmCurr;
};
 
} /// namespace port
} /// namespace aa
} /// namespace consumer
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_CONSUMER_AA_RPORT_H