///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_vcs_brake.h
/// SOFTWARE COMPONENT NAME           : PPort_VCS_Brake
/// GENERATED DATE                    : 2024-10-17 15:32:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_VCS_BRAKE_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_VCS_BRAKE_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/simulation/vcs_brake_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace simulation
{
namespace skeleton
{
 
class PPort_VCS_BrakeSkeletonImpl : public VCS_BrakeSkeleton
{
public:
    /// @brief Constructor
    PPort_VCS_BrakeSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, notifyMCPrs
    ara::core::Future<VCS_BrakeSkeleton::notifyMCPrsOutput> notifyMCPrs() override;
    
    /// @brief Request with Response method, notifyTq
    ara::core::Future<VCS_BrakeSkeleton::notifyTqOutput> notifyTq() override;
    
    /// @brief Request with Response method, setTargetAx
    ara::core::Future<VCS_BrakeSkeleton::setTargetAxOutput> setTargetAx(const eevp::simulation::VCS_Acceleration& ax) override;
    
    /// @brief Request with Response method, setTotalForce
    ara::core::Future<VCS_BrakeSkeleton::setTotalForceOutput> setTotalForce(const eevp::simulation::VCS_LgtBrkFTotal& lgtBrkFTotal) override;
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
};
 
} /// namespace skeleton
} /// namespace simulation
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
class PPort_VCS_Brake
{
public:
    /// @brief Constructor
    PPort_VCS_Brake();
    
    /// @brief Destructor
    ~PPort_VCS_Brake();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::shared_ptr<eevp::simulation::skeleton::VCS_BrakeSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_VCS_BRAKE_H