///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportrearcurtain.h
/// SOFTWARE COMPONENT NAME           : RPortRearCurtain
/// GENERATED DATE                    : 2025-07-18 17:10:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_KATECH_AA_RPORTREARCURTAIN_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_KATECH_AA_RPORTREARCURTAIN_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soarcurtain_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace katech
{
namespace aa
{
namespace port
{
 
class RPortRearCurtain
{
public:
    /// @brief Constructor
    RPortRearCurtain();
    
    /// @brief Destructor
    ~RPortRearCurtain();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, soaRctnStatus
    void SubscribesoaRctnStatus();
     
    /// @brief Stop field subscription, soaRctnStatus
    void StopSubscribesoaRctnStatus();
     
    /// @brief Field notification receive handler, soaRctnStatus
    void ReceiveFieldsoaRctnStatusTriggered();
     
    /// @brief Field notification receive handler, soaRctnStatus
    void ReceiveFieldsoaRctnStatusCyclic();
     
    /// @brief Read field notification value, soaRctnStatus
    void ReadValuesoaRctnStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaRctnStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRctnStatus(std::function<void(const eevp::control::proxy::fields::soaRctnStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRctnStatus
    void GetsoaRctnStatus();
    
    /// @brief Subscribe field notification, soaRctnSwVersion
    void SubscribesoaRctnSwVersion();
     
    /// @brief Stop field subscription, soaRctnSwVersion
    void StopSubscribesoaRctnSwVersion();
     
    /// @brief Field notification receive handler, soaRctnSwVersion
    void ReceiveFieldsoaRctnSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaRctnSwVersion
    void ReceiveFieldsoaRctnSwVersionCyclic();
     
    /// @brief Read field notification value, soaRctnSwVersion
    void ReadValuesoaRctnSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaRctnSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRctnSwVersion(std::function<void(const eevp::control::proxy::fields::soaRctnSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRctnSwVersion
    void GetsoaRctnSwVersion();
    
    /// @brief Request with Response method using by software component, RequestRearCurtainOperation
    void RequestRequestRearCurtainOperation(const eevp::control::SoaRctnMotorDir& motorDir);
     
    /// @brief Regist callback from software component
    void RegistResponseHandlerRequestRearCurtainOperation(std::function<void(const eevp::control::proxy::methods::RequestRearCurtainOperation::Output&)> handler);
    
    /// @brief Fire and Forget method using by software component, RequestRearCurtainPosition
    void RequestRequestRearCurtainPosition(const std::uint8_t& posPercentage);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaRcurtainProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, soaRctnStatus
    void RegistReceiversoaRctnStatus();
    
    /// @brief Callback for field notification receiver, soaRctnSwVersion
    void RegistReceiversoaRctnSwVersion();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::proxy::SoaRcurtainProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, soaRctnStatus
    std::function<void(const eevp::control::proxy::fields::soaRctnStatus::FieldType&)> m_receiversoaRctnStatus;
    
    /// @brief Callback from software component, soaRctnSwVersion
    std::function<void(const eevp::control::proxy::fields::soaRctnSwVersion::FieldType&)> m_receiversoaRctnSwVersion;
    
    /// @brief Callback from software component, RequestRearCurtainOperation
    std::function<void(const eevp::control::proxy::methods::RequestRearCurtainOperation::Output&)> m_responderRequestRearCurtainOperation;
};
 
} /// namespace port
} /// namespace aa
} /// namespace katech
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_KATECH_AA_RPORTREARCURTAIN_H