///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportwiper.h
/// SOFTWARE COMPONENT NAME           : RPortWiper
/// GENERATED DATE                    : 2025-08-07 19:04:14
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_INTELLIGENTWIPER_AA_RPORTWIPER_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_INTELLIGENTWIPER_AA_RPORTWIPER_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soawiper_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace intelligentwiper
{
namespace aa
{
namespace port
{
 
class RPortWiper
{
public:
    /// @brief Constructor
    RPortWiper();
    
    /// @brief Destructor
    ~RPortWiper();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, soaWiperDeviceNormal
    void SubscribesoaWiperDeviceNormal();
     
    /// @brief Stop field subscription, soaWiperDeviceNormal
    void StopSubscribesoaWiperDeviceNormal();
     
    /// @brief Field notification receive handler, soaWiperDeviceNormal
    void ReceiveFieldsoaWiperDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaWiperDeviceNormal
    void ReceiveFieldsoaWiperDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaWiperDeviceNormal
    void ReadValuesoaWiperDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaWiperDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaWiperDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaWiperDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaWiperDeviceNormal
    void GetsoaWiperDeviceNormal();
    
    /// @brief Subscribe field notification, soaWiperStatus
    void SubscribesoaWiperStatus();
     
    /// @brief Stop field subscription, soaWiperStatus
    void StopSubscribesoaWiperStatus();
     
    /// @brief Field notification receive handler, soaWiperStatus
    void ReceiveFieldsoaWiperStatusTriggered();
     
    /// @brief Field notification receive handler, soaWiperStatus
    void ReceiveFieldsoaWiperStatusCyclic();
     
    /// @brief Read field notification value, soaWiperStatus
    void ReadValuesoaWiperStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaWiperStatus::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaWiperStatus(std::function<void(const eevp::control::proxy::fields::soaWiperStatus::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaWiperStatus
    void GetsoaWiperStatus();
    
    /// @brief Subscribe field notification, soaWiperSwVersion
    void SubscribesoaWiperSwVersion();
     
    /// @brief Stop field subscription, soaWiperSwVersion
    void StopSubscribesoaWiperSwVersion();
     
    /// @brief Field notification receive handler, soaWiperSwVersion
    void ReceiveFieldsoaWiperSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaWiperSwVersion
    void ReceiveFieldsoaWiperSwVersionCyclic();
     
    /// @brief Read field notification value, soaWiperSwVersion
    void ReadValuesoaWiperSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaWiperSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaWiperSwVersion(std::function<void(const eevp::control::proxy::fields::soaWiperSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaWiperSwVersion
    void GetsoaWiperSwVersion();
    
    /// @brief Fire and Forget method using by software component, RequestWiperOperation
    void RequestRequestWiperOperation(const eevp::control::SoaWiperMode& mode);
    
    /// @brief Fire and Forget method using by software component, SetWiperAutoSpeed
    void RequestSetWiperAutoSpeed(const bool& isAutoSpeed);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaWiperProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, soaWiperDeviceNormal
    void RegistReceiversoaWiperDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaWiperStatus
    void RegistReceiversoaWiperStatus();
    
    /// @brief Callback for field notification receiver, soaWiperSwVersion
    void RegistReceiversoaWiperSwVersion();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::proxy::SoaWiperProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, soaWiperDeviceNormal
    std::function<void(const eevp::control::proxy::fields::soaWiperDeviceNormal::FieldType&)> m_receiversoaWiperDeviceNormal;
    
    /// @brief Callback from software component, soaWiperStatus
    std::function<void(const eevp::control::proxy::fields::soaWiperStatus::FieldType&)> m_receiversoaWiperStatus;
    
    /// @brief Callback from software component, soaWiperSwVersion
    std::function<void(const eevp::control::proxy::fields::soaWiperSwVersion::FieldType&)> m_receiversoaWiperSwVersion;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace intelligentwiper
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_INTELLIGENTWIPER_AA_RPORTWIPER_H