///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, ARA::COM Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : soapower_skeleton.h
/// SERVICE INTERFACE NAME            : SoaPower
/// GENERATED DATE                    : 2024-07-19 07:35:30
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// CAUTION!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT                                                   
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_COM_GEN_SERVICE_INTERFACE_SOAPOWER_SKELETON_H
#define PARA_COM_GEN_SERVICE_INTERFACE_SOAPOWER_SKELETON_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @uptrace{SWS_CM_01004}
#include "soapower_common.h"
#include "para/com/skeleton/skeleton_interface.h"
/// @uptrace{SWS_CM_01005}
namespace eevp
{
namespace control
{
/// @uptrace{SWS_CM_01006}
namespace skeleton
{
class SoaPowerSkeleton;
/// @uptrace{SWS_CM_01009}
namespace events
{
} /// namespace events
/// @uptrace{SWS_CM_01031}
namespace fields
{
/// @uptrace{SWS_CM_00007}
class soaPwrZone1Curr
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaPwrZone1Curr;
    /// @brief Constructor
    explicit soaPwrZone1Curr(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPwrZone1Curr() = default;
    /// @brief Delete copy constructor
    soaPwrZone1Curr(const soaPwrZone1Curr& other) = delete;
    /// @brief Delete copy assignment
    soaPwrZone1Curr& operator=(const soaPwrZone1Curr& other) = delete;
    /// @brief Move constructor
    soaPwrZone1Curr(soaPwrZone1Curr&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPwrZone1Curr& operator=(soaPwrZone1Curr&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPwrZone1CurrGetter"};
    const std::string kNotifierCallSign = {"soaPwrZone1CurrNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPwrZone1Power
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaPwrZone1Power;
    /// @brief Constructor
    explicit soaPwrZone1Power(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPwrZone1Power() = default;
    /// @brief Delete copy constructor
    soaPwrZone1Power(const soaPwrZone1Power& other) = delete;
    /// @brief Delete copy assignment
    soaPwrZone1Power& operator=(const soaPwrZone1Power& other) = delete;
    /// @brief Move constructor
    soaPwrZone1Power(soaPwrZone1Power&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPwrZone1Power& operator=(soaPwrZone1Power&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPwrZone1PowerGetter"};
    const std::string kNotifierCallSign = {"soaPwrZone1PowerNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPwrZone2Curr
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaPwrZone2Curr;
    /// @brief Constructor
    explicit soaPwrZone2Curr(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPwrZone2Curr() = default;
    /// @brief Delete copy constructor
    soaPwrZone2Curr(const soaPwrZone2Curr& other) = delete;
    /// @brief Delete copy assignment
    soaPwrZone2Curr& operator=(const soaPwrZone2Curr& other) = delete;
    /// @brief Move constructor
    soaPwrZone2Curr(soaPwrZone2Curr&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPwrZone2Curr& operator=(soaPwrZone2Curr&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPwrZone2CurrGetter"};
    const std::string kNotifierCallSign = {"soaPwrZone2CurrNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPwrZone2Power
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaPwrZone2Power;
    /// @brief Constructor
    explicit soaPwrZone2Power(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPwrZone2Power() = default;
    /// @brief Delete copy constructor
    soaPwrZone2Power(const soaPwrZone2Power& other) = delete;
    /// @brief Delete copy assignment
    soaPwrZone2Power& operator=(const soaPwrZone2Power& other) = delete;
    /// @brief Move constructor
    soaPwrZone2Power(soaPwrZone2Power&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPwrZone2Power& operator=(soaPwrZone2Power&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPwrZone2PowerGetter"};
    const std::string kNotifierCallSign = {"soaPwrZone2PowerNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPwrZone3Curr
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaPwrZone3Curr;
    /// @brief Constructor
    explicit soaPwrZone3Curr(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPwrZone3Curr() = default;
    /// @brief Delete copy constructor
    soaPwrZone3Curr(const soaPwrZone3Curr& other) = delete;
    /// @brief Delete copy assignment
    soaPwrZone3Curr& operator=(const soaPwrZone3Curr& other) = delete;
    /// @brief Move constructor
    soaPwrZone3Curr(soaPwrZone3Curr&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPwrZone3Curr& operator=(soaPwrZone3Curr&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPwrZone3CurrGetter"};
    const std::string kNotifierCallSign = {"soaPwrZone3CurrNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPwrZone3Power
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaPwrZone3Power;
    /// @brief Constructor
    explicit soaPwrZone3Power(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPwrZone3Power() = default;
    /// @brief Delete copy constructor
    soaPwrZone3Power(const soaPwrZone3Power& other) = delete;
    /// @brief Delete copy assignment
    soaPwrZone3Power& operator=(const soaPwrZone3Power& other) = delete;
    /// @brief Move constructor
    soaPwrZone3Power(soaPwrZone3Power&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPwrZone3Power& operator=(soaPwrZone3Power&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPwrZone3PowerGetter"};
    const std::string kNotifierCallSign = {"soaPwrZone3PowerNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPwrZone4Curr
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaPwrZone4Curr;
    /// @brief Constructor
    explicit soaPwrZone4Curr(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPwrZone4Curr() = default;
    /// @brief Delete copy constructor
    soaPwrZone4Curr(const soaPwrZone4Curr& other) = delete;
    /// @brief Delete copy assignment
    soaPwrZone4Curr& operator=(const soaPwrZone4Curr& other) = delete;
    /// @brief Move constructor
    soaPwrZone4Curr(soaPwrZone4Curr&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPwrZone4Curr& operator=(soaPwrZone4Curr&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPwrZone4CurrGetter"};
    const std::string kNotifierCallSign = {"soaPwrZone4CurrNotifier"};
};
/// @uptrace{SWS_CM_00007}
class soaPwrZone4Power
{
public:
    /// @brief Type alias for type of field value
    /// @uptrace{SWS_CM_00162, SWS_CM_90437}
    using FieldType = eevp::control::SoaPwrZone4Power;
    /// @brief Constructor
    explicit soaPwrZone4Power(para::com::SkeletonInterface* interface) : mInterface(interface)
    {
    }
    /// @brief Destructor
    virtual ~soaPwrZone4Power() = default;
    /// @brief Delete copy constructor
    soaPwrZone4Power(const soaPwrZone4Power& other) = delete;
    /// @brief Delete copy assignment
    soaPwrZone4Power& operator=(const soaPwrZone4Power& other) = delete;
    /// @brief Move constructor
    soaPwrZone4Power(soaPwrZone4Power&& other) noexcept : mInterface(other.mInterface)
    {
        RegisterGetHandler(std::move(other.mGetHandler));
    }
    /// @brief Move assignment
    soaPwrZone4Power& operator=(soaPwrZone4Power&& other) noexcept
    {
        mInterface = other.mInterface;
        RegisterGetHandler(std::move(other.mGetHandler));
        return *this;
    }
    /// @brief Register callback for getter method
    /// @uptrace{SWS_CM_00114}
    ara::core::Result<void> RegisterGetHandler(std::function<ara::core::Future<FieldType>()> getHandler)
    {
        ara::core::Result<void> result{};
        if (getHandler != nullptr)
        {
            mGetHandler = std::move(getHandler);
            mInterface->SetMethodCallHandler(kGetterCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken token) {
                HandleGet(token);
            });
        }
        return result;
    }
    /// @brief Send notification with value to subscribing service consumers
    /// @uptrace{SWS_CM_90437}
    ara::core::Result<void> Update(const FieldType& value)
    {
        para::serializer::Serializer serializer{};
        serializer.write(value);
        auto payload = serializer.ensure();
        return mInterface->SendEvent(kNotifierCallSign, payload);
    }
    
private:
    void HandleGet(const para::com::MethodToken token)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        auto future = mGetHandler();
        auto result = future.GetResult();
        if (result.HasValue())
        {
            FieldType value = result.Value();
            para::serializer::Serializer serializer{};
            serializer.write(value);
            retData = serializer.ensure();
            retResult = 0;
        }
        else
        {
            ara::core::ErrorDomain::IdType domainId = result.Error().Domain().Id();
            ara::core::ErrorDomain::CodeType errorCode = result.Error().Value();
            para::serializer::Serializer serializer{};
            serializer.write(0, true, 0, domainId);
            serializer.write(0, true, 0, errorCode);
            retData = serializer.ensure();
            retResult = 1;
        }
        mInterface->ReturnMethod(kGetterCallSign, retResult, retData, token);
    }
    para::com::SkeletonInterface* mInterface;
    std::function<ara::core::Future<FieldType>()> mGetHandler{nullptr};
    const std::string kGetterCallSign = {"soaPwrZone4PowerGetter"};
    const std::string kNotifierCallSign = {"soaPwrZone4PowerNotifier"};
};
} /// namespace fields
/// @uptrace{SWS_CM_00002}
class SoaPowerSkeleton
{
public:
    /// @uptrace{SWS_CM_00191}
    /// @brief Constructor
    /// @uptrace{SWS_CM_00002, SWS_CM_00152}
    SoaPowerSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent)
        : mInterface(std::make_unique<para::com::SkeletonInterface>(instanceSpec, mode))
        , soaPwrZone1Curr(mInterface.get())
        , soaPwrZone1Power(mInterface.get())
        , soaPwrZone2Curr(mInterface.get())
        , soaPwrZone2Power(mInterface.get())
        , soaPwrZone3Curr(mInterface.get())
        , soaPwrZone3Power(mInterface.get())
        , soaPwrZone4Curr(mInterface.get())
        , soaPwrZone4Power(mInterface.get())
    {
        mInterface->SetMethodCallHandler(kSetEnableDrvseatCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableDrvseat(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableFrontPdwCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableFrontPdw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableMfswCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableMfsw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableMlmCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableMlm(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRainSensorCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRainSensor(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRearCurtainCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRearCurtain(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRearPdwCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRearPdw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRoaCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRoa(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableWiperCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableWiper(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
    }
    /// @brief Destructor
    virtual ~SoaPowerSkeleton() = default;
    /// @brief Delete copy constructor
    /// @uptrace{SWS_CM_00134}
    SoaPowerSkeleton(const SoaPowerSkeleton& other) = delete;
    /// @brief Delete copy assignment
    /// @uptrace{SWS_CM_00134}
    SoaPowerSkeleton& operator=(const SoaPowerSkeleton& other) = delete;
    /// @brief Move constructor
    /// @uptrace{SWS_CM_00135}
    SoaPowerSkeleton(SoaPowerSkeleton&& other) noexcept
        : mInterface(std::move(other.mInterface))
        , soaPwrZone1Curr(std::move(other.soaPwrZone1Curr))
        , soaPwrZone1Power(std::move(other.soaPwrZone1Power))
        , soaPwrZone2Curr(std::move(other.soaPwrZone2Curr))
        , soaPwrZone2Power(std::move(other.soaPwrZone2Power))
        , soaPwrZone3Curr(std::move(other.soaPwrZone3Curr))
        , soaPwrZone3Power(std::move(other.soaPwrZone3Power))
        , soaPwrZone4Curr(std::move(other.soaPwrZone4Curr))
        , soaPwrZone4Power(std::move(other.soaPwrZone4Power))
    {
        mInterface->SetMethodCallHandler(kSetEnableDrvseatCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableDrvseat(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableFrontPdwCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableFrontPdw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableMfswCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableMfsw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableMlmCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableMlm(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRainSensorCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRainSensor(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRearCurtainCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRearCurtain(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRearPdwCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRearPdw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRoaCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRoa(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableWiperCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableWiper(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
    }
    /// @brief Move assignment
    /// @uptrace{SWS_CM_00135}
    SoaPowerSkeleton& operator=(SoaPowerSkeleton&& other) noexcept
    {
        mInterface = std::move(other.mInterface);
        soaPwrZone1Curr = std::move(other.soaPwrZone1Curr);
        soaPwrZone1Power = std::move(other.soaPwrZone1Power);
        soaPwrZone2Curr = std::move(other.soaPwrZone2Curr);
        soaPwrZone2Power = std::move(other.soaPwrZone2Power);
        soaPwrZone3Curr = std::move(other.soaPwrZone3Curr);
        soaPwrZone3Power = std::move(other.soaPwrZone3Power);
        soaPwrZone4Curr = std::move(other.soaPwrZone4Curr);
        soaPwrZone4Power = std::move(other.soaPwrZone4Power);
        mInterface->SetMethodCallHandler(kSetEnableDrvseatCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableDrvseat(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableFrontPdwCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableFrontPdw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableMfswCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableMfsw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableMlmCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableMlm(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRainSensorCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRainSensor(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRearCurtainCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRearCurtain(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRearPdwCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRearPdw(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableRoaCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableRoa(data);
        });
        mInterface->SetMethodCallHandler(kSetEnableWiperCallSign, [this](const std::vector<std::uint8_t>& data, const para::com::MethodToken /*token*/) {
            HandleSetEnableWiper(data);
        });
        mInterface->SetE2EErrorHandler([this](const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter) {
            E2EErrorHandler(errorCode, dataID, messageCounter);
        });
        other.mInterface.reset();
        return *this;
    }
    /// @brief Send "OfferService" message to Communication Management
    /// @uptrace{SWS_CM_00101}
    ara::core::Result<void> OfferService()
    {
        return mInterface->OfferService();
    }
    /// @brief Send "StopOfferService" message to Communication Management
    /// @uptrace{SWS_CM_00111}
    void StopOfferService()
    {
        mInterface->StopOfferService();
    }
    /// @brief Allows the implementation providing the service method to trigger the execution of the next service consumer method call at a specific point of time
    ///        if the processing mode is set to kPoll.
    /// @note This function requires that ara::com::MethodCallProcessingMode is configured as kPoll by constructor
    /// @uptrace{SWS_CM_00199}
    ara::core::Future<bool> ProcessNextMethodCall()
    {
        ara::core::Promise<bool> promise{};
        auto ret = mInterface->ProcessNextMethodCall();
        if (ret.HasValue())
        {
            promise.set_value(ret.Value());
        }
        else
        {
            promise.SetError(ret.Error());
        }
        return promise.get_future();
    }
    /// @brief In case the call to E2E_check indicated a failed E2E check of the request message, the server application can get notified via an E2E error handler.
    /// @uptrace{SWS_CM_10470}
    virtual void E2EErrorHandler(const ara::com::e2e::E2EErrorDomain& errorCode, ara::com::e2e::DataID dataID, ara::com::e2e::MessageCounter messageCounter)
    {
    }
    
private:
    std::unique_ptr<para::com::SkeletonInterface> mInterface;
    
public:
    /// @brief Field, soaPwrZone1Curr
    fields::soaPwrZone1Curr soaPwrZone1Curr;
    /// @brief Field, soaPwrZone1Power
    fields::soaPwrZone1Power soaPwrZone1Power;
    /// @brief Field, soaPwrZone2Curr
    fields::soaPwrZone2Curr soaPwrZone2Curr;
    /// @brief Field, soaPwrZone2Power
    fields::soaPwrZone2Power soaPwrZone2Power;
    /// @brief Field, soaPwrZone3Curr
    fields::soaPwrZone3Curr soaPwrZone3Curr;
    /// @brief Field, soaPwrZone3Power
    fields::soaPwrZone3Power soaPwrZone3Power;
    /// @brief Field, soaPwrZone4Curr
    fields::soaPwrZone4Curr soaPwrZone4Curr;
    /// @brief Field, soaPwrZone4Power
    fields::soaPwrZone4Power soaPwrZone4Power;
    /// @brief Method, SetEnableDrvseat
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableDrvseat(const std::uint8_t& mlmSoaPowerState, const std::uint8_t& drvseatSoaPowerState, const std::uint8_t& mfswSoaPowerState) = 0;
    /// @brief Method, SetEnableFrontPdw
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableFrontPdw(const bool& rpdwTurnOn) = 0;
    /// @brief Method, SetEnableMfsw
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableMfsw(const bool& mfswTurnOn) = 0;
    /// @brief Method, SetEnableMlm
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableMlm(const bool& mlmTurnOn) = 0;
    /// @brief Method, SetEnableRainSensor
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableRainSensor(const bool& rainSnsrTurnOn) = 0;
    /// @brief Method, SetEnableRearCurtain
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableRearCurtain(const bool& rCurtTurnOn) = 0;
    /// @brief Method, SetEnableRearPdw
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableRearPdw(const bool& rpdwTurnOn) = 0;
    /// @brief Method, SetEnableRoa
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableRoa(const bool& roaTurnOn) = 0;
    /// @brief Method, SetEnableWiper
    /// @uptrace{SWS_CM_90434}
    virtual void SetEnableWiper(const bool& rCurtTurnOn) = 0;
    
private:
    void HandleSetEnableDrvseat(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        std::uint8_t _mlmSoaPowerState_;
        std::uint8_t _drvseatSoaPowerState_;
        std::uint8_t _mfswSoaPowerState_;
        deserializer.read(_mlmSoaPowerState_);
        deserializer.read(_drvseatSoaPowerState_);
        deserializer.read(_mfswSoaPowerState_);
        SetEnableDrvseat(_mlmSoaPowerState_, _drvseatSoaPowerState_, _mfswSoaPowerState_);
    }
    void HandleSetEnableFrontPdw(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _rpdwTurnOn_;
        deserializer.read(_rpdwTurnOn_);
        SetEnableFrontPdw(_rpdwTurnOn_);
    }
    void HandleSetEnableMfsw(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _mfswTurnOn_;
        deserializer.read(_mfswTurnOn_);
        SetEnableMfsw(_mfswTurnOn_);
    }
    void HandleSetEnableMlm(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _mlmTurnOn_;
        deserializer.read(_mlmTurnOn_);
        SetEnableMlm(_mlmTurnOn_);
    }
    void HandleSetEnableRainSensor(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _rainSnsrTurnOn_;
        deserializer.read(_rainSnsrTurnOn_);
        SetEnableRainSensor(_rainSnsrTurnOn_);
    }
    void HandleSetEnableRearCurtain(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _rCurtTurnOn_;
        deserializer.read(_rCurtTurnOn_);
        SetEnableRearCurtain(_rCurtTurnOn_);
    }
    void HandleSetEnableRearPdw(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _rpdwTurnOn_;
        deserializer.read(_rpdwTurnOn_);
        SetEnableRearPdw(_rpdwTurnOn_);
    }
    void HandleSetEnableRoa(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _roaTurnOn_;
        deserializer.read(_roaTurnOn_);
        SetEnableRoa(_roaTurnOn_);
    }
    void HandleSetEnableWiper(const std::vector<std::uint8_t>& data)
    {
        std::uint8_t retResult{1};
        std::vector<std::uint8_t> retData{};
        para::serializer::Deserializer deserializer{data};
        bool _rCurtTurnOn_;
        deserializer.read(_rCurtTurnOn_);
        SetEnableWiper(_rCurtTurnOn_);
    }
    const std::string kSetEnableDrvseatCallSign{"SetEnableDrvseat"};
    const std::string kSetEnableFrontPdwCallSign{"SetEnableFrontPdw"};
    const std::string kSetEnableMfswCallSign{"SetEnableMfsw"};
    const std::string kSetEnableMlmCallSign{"SetEnableMlm"};
    const std::string kSetEnableRainSensorCallSign{"SetEnableRainSensor"};
    const std::string kSetEnableRearCurtainCallSign{"SetEnableRearCurtain"};
    const std::string kSetEnableRearPdwCallSign{"SetEnableRearPdw"};
    const std::string kSetEnableRoaCallSign{"SetEnableRoa"};
    const std::string kSetEnableWiperCallSign{"SetEnableWiper"};
};
} /// namespace skeleton
} /// namespace control
} /// namespace eevp
#endif /// PARA_COM_GEN_SERVICE_INTERFACE_SOAPOWER_SKELETON_H