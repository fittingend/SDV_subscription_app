///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportwiper.cpp
/// SOFTWARE COMPONENT NAME           : RPortWiper
/// GENERATED DATE                    : 2025-08-07 19:04:14
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "intelligentwiper/aa/port/rportwiper.h"
 
namespace intelligentwiper
{
namespace aa
{
namespace port
{
 
RPortWiper::RPortWiper()
    : m_logger(ara::log::CreateLogger("INTW", "PORT", ara::log::LogLevel::kInfo))
    , m_running{false}
    , m_found{false}
    , m_receiversoaWiperDeviceNormal{nullptr}
    , m_receiversoaWiperStatus{nullptr}
    , m_receiversoaWiperSwVersion{nullptr}
{
}
 
RPortWiper::~RPortWiper()
{
}
 
void RPortWiper::Start()
{
    m_logger.LogInfo() << "RPortWiper::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"IntelligentWiper/AA/RPortWiper"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaWiperProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaWiperProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogInfo() << "RPortWiper::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortWiper::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortWiper::Terminate()
{
    m_logger.LogInfo() << "RPortWiper::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribesoaWiperDeviceNormal();
        StopSubscribesoaWiperStatus();
        StopSubscribesoaWiperSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogInfo() << "RPortWiper::Terminate::StopFindService";
    }
}
 
void RPortWiper::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaWiperProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogInfo() << "RPortWiper::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogInfo() << "RPortWiper::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogInfo() << "RPortWiper::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogInfo() << "RPortWiper::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::control::proxy::SoaWiperProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribesoaWiperDeviceNormal();
        SubscribesoaWiperStatus();
        SubscribesoaWiperSwVersion();
    }
}
 
void RPortWiper::SubscribesoaWiperDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaWiperDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaWiperDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::SubscribesoaWiperDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortWiper::SubscribesoaWiperDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortWiper::StopSubscribesoaWiperDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaWiperDeviceNormal.Unsubscribe();
        m_logger.LogInfo() << "RPortWiper::StopSubscribesoaWiperDeviceNormal::Unsubscribed";
    }
}
 
void RPortWiper::RegistReceiversoaWiperDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaWiperDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaWiperDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::RegistReceiversoaWiperDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortWiper::RegistReceiversoaWiperDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortWiper::ReceiveFieldsoaWiperDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaWiperDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortWiper::ReadValuesoaWiperDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortWiper::ReceiveFieldsoaWiperDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortWiper::ReceiveFieldsoaWiperDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortWiper::ReceiveFieldsoaWiperDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaWiperDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortWiper::ReadValuesoaWiperDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortWiper::ReceiveFieldsoaWiperDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortWiper::ReceiveFieldsoaWiperDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortWiper::ReadValuesoaWiperDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaWiperDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaWiperDeviceNormal)
    {
        m_receiversoaWiperDeviceNormal(value);
    }
}
 
void RPortWiper::GetsoaWiperDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaWiperDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::GetsoaWiperDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaWiperDeviceNormal)
            {
                m_receiversoaWiperDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortWiper::GetsoaWiperDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortWiper::RegistFieldHandlersoaWiperDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaWiperDeviceNormal::FieldType&)> handler)
{
    m_receiversoaWiperDeviceNormal = handler;
}
 
void RPortWiper::SubscribesoaWiperStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaWiperStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaWiperStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::SubscribesoaWiperStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortWiper::SubscribesoaWiperStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPortWiper::StopSubscribesoaWiperStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaWiperStatus.Unsubscribe();
        m_logger.LogInfo() << "RPortWiper::StopSubscribesoaWiperStatus::Unsubscribed";
    }
}
 
void RPortWiper::RegistReceiversoaWiperStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaWiperStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaWiperStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::RegistReceiversoaWiperStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortWiper::RegistReceiversoaWiperStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortWiper::ReceiveFieldsoaWiperStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaWiperStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperStatus.GetNewSamples([&](auto samplePtr) {
                RPortWiper::ReadValuesoaWiperStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortWiper::ReceiveFieldsoaWiperStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortWiper::ReceiveFieldsoaWiperStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortWiper::ReceiveFieldsoaWiperStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaWiperStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperStatus.GetNewSamples([&](auto samplePtr) {
                    RPortWiper::ReadValuesoaWiperStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortWiper::ReceiveFieldsoaWiperStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortWiper::ReceiveFieldsoaWiperStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortWiper::ReadValuesoaWiperStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaWiperStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaWiperStatus)
    {
        m_receiversoaWiperStatus(value);
    }
}
 
void RPortWiper::GetsoaWiperStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaWiperStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::GetsoaWiperStatus::Responded";
            
            auto result = response.Value();
            if (m_receiversoaWiperStatus)
            {
                m_receiversoaWiperStatus(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortWiper::GetsoaWiperStatus::" << response.Error().Message();
        }
    }
}
 
void RPortWiper::RegistFieldHandlersoaWiperStatus(std::function<void(const eevp::control::proxy::fields::soaWiperStatus::FieldType&)> handler)
{
    m_receiversoaWiperStatus = handler;
}
 
void RPortWiper::SubscribesoaWiperSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaWiperSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaWiperSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::SubscribesoaWiperSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortWiper::SubscribesoaWiperSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortWiper::StopSubscribesoaWiperSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaWiperSwVersion.Unsubscribe();
        m_logger.LogInfo() << "RPortWiper::StopSubscribesoaWiperSwVersion::Unsubscribed";
    }
}
 
void RPortWiper::RegistReceiversoaWiperSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaWiperSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaWiperSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::RegistReceiversoaWiperSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortWiper::RegistReceiversoaWiperSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortWiper::ReceiveFieldsoaWiperSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaWiperSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortWiper::ReadValuesoaWiperSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortWiper::ReceiveFieldsoaWiperSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortWiper::ReceiveFieldsoaWiperSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortWiper::ReceiveFieldsoaWiperSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaWiperSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaWiperSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortWiper::ReadValuesoaWiperSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortWiper::ReceiveFieldsoaWiperSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortWiper::ReceiveFieldsoaWiperSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortWiper::ReadValuesoaWiperSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaWiperSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaWiperSwVersion)
    {
        m_receiversoaWiperSwVersion(value);
    }
}
 
void RPortWiper::GetsoaWiperSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaWiperSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortWiper::GetsoaWiperSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaWiperSwVersion)
            {
                m_receiversoaWiperSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortWiper::GetsoaWiperSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortWiper::RegistFieldHandlersoaWiperSwVersion(std::function<void(const eevp::control::proxy::fields::soaWiperSwVersion::FieldType&)> handler)
{
    m_receiversoaWiperSwVersion = handler;
}
 
void RPortWiper::RequestRequestWiperOperation(const eevp::control::SoaWiperMode& mode)
{
    if (m_found)
    {
        m_interface->RequestWiperOperation(mode);
    }
}
 
void RPortWiper::RequestSetWiperAutoSpeed(const bool& isAutoSpeed)
{
    if (m_found)
    {
        m_interface->SetWiperAutoSpeed(isAutoSpeed);
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace intelligentwiper
 
/// EOF