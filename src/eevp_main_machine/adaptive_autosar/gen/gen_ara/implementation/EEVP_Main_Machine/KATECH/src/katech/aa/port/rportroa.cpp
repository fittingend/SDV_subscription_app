///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportroa.cpp
/// SOFTWARE COMPONENT NAME           : RPortRoa
/// GENERATED DATE                    : 2024-10-17 15:32:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "katech/aa/port/rportroa.h"
 
namespace katech
{
namespace aa
{
namespace port
{
 
RPortRoa::RPortRoa()
    : m_logger(ara::log::CreateLogger("KATC", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
{
}
 
RPortRoa::~RPortRoa()
{
}
 
void RPortRoa::Start()
{
    m_logger.LogVerbose() << "RPortRoa::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"KATECH/AA/RPortRoa"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaRoaProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaRoaProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPortRoa::Start::StartFindService";
    }
    else
    {
        m_logger.LogVerbose() << "RPortRoa::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortRoa::Terminate()
{
    m_logger.LogVerbose() << "RPortRoa::Terminate";
    
    // stop port
    m_running = false;
    
    // clear consumer
    if (m_interface)
    {
        StopSubscribesoaRoaDetectCount();
        StopSubscribesoaRoaDetectState();
        StopSubscribesoaRoaDeviceNormal();
        StopSubscribesoaRoaMode();
        StopSubscribesoaRoaRunningState();
        StopSubscribesoaRoaSensorError();
        StopSubscribesoaRoaSwVersion();
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPortRoa::Terminate::StopFindService";
    }
}
 
void RPortRoa::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaRoaProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPortRoa::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPortRoa::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPortRoa::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPortRoa::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_shared<eevp::control::proxy::SoaRoaProxy>(handles[0]);
        m_findHandle = std::make_shared<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        // subscribe field notifications
        SubscribesoaRoaDetectCount();
        SubscribesoaRoaDetectState();
        SubscribesoaRoaDeviceNormal();
        SubscribesoaRoaMode();
        SubscribesoaRoaRunningState();
        SubscribesoaRoaSensorError();
        SubscribesoaRoaSwVersion();
    }
}
 
void RPortRoa::SubscribesoaRoaDetectCount()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaRoaDetectCount();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDetectCount.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaDetectCount::Subscribed";
        }
        else
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaDetectCount::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaDetectCount()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDetectCount.Unsubscribe();
        
        m_logger.LogVerbose() << "RPortRoa::StopSubscribesoaRoaDetectCount::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaDetectCount()
{
    if (m_found)
    {
        // regist callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDetectCountTriggered();
        };
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDetectCountTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaRoaDetectCount.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectCount.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaDetectCount(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDetectCountCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaRoaDetectCount.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectCount.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaDetectCount(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaDetectCount(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDetectCount::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // process value logic
}
 
void RPortRoa::SubscribesoaRoaDetectState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaRoaDetectState();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDetectState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaDetectState::Subscribed";
        }
        else
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaDetectState::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaDetectState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDetectState.Unsubscribe();
        
        m_logger.LogVerbose() << "RPortRoa::StopSubscribesoaRoaDetectState::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaDetectState()
{
    if (m_found)
    {
        // regist callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDetectStateTriggered();
        };
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDetectStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaRoaDetectState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectState.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaDetectState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDetectStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaRoaDetectState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectState.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaDetectState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaDetectState(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDetectState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // process value logic
}
 
void RPortRoa::SubscribesoaRoaDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaRoaDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDeviceNormal.Unsubscribe();
        
        m_logger.LogVerbose() << "RPortRoa::StopSubscribesoaRoaDeviceNormal::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaDeviceNormal()
{
    if (m_found)
    {
        // regist callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDeviceNormalTriggered();
        };
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaRoaDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaRoaDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // process value logic
}
 
void RPortRoa::SubscribesoaRoaMode()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaRoaMode();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaMode.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaMode::Subscribed";
        }
        else
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaMode::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaMode()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaMode.Unsubscribe();
        
        m_logger.LogVerbose() << "RPortRoa::StopSubscribesoaRoaMode::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaMode()
{
    if (m_found)
    {
        // regist callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaModeTriggered();
        };
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaModeTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaRoaMode.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaMode.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaMode(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaModeCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaRoaMode.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaMode.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaMode(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaMode(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaMode::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // process value logic
}
 
void RPortRoa::SubscribesoaRoaRunningState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaRoaRunningState();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaRunningState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaRunningState::Subscribed";
        }
        else
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaRunningState::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaRunningState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaRunningState.Unsubscribe();
        
        m_logger.LogVerbose() << "RPortRoa::StopSubscribesoaRoaRunningState::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaRunningState()
{
    if (m_found)
    {
        // regist callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaRunningStateTriggered();
        };
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaRunningStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaRoaRunningState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaRunningState.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaRunningState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaRunningStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaRoaRunningState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaRunningState.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaRunningState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaRunningState(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaRunningState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // process value logic
}
 
void RPortRoa::SubscribesoaRoaSensorError()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaRoaSensorError();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaSensorError.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaSensorError::Subscribed";
        }
        else
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaSensorError::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaSensorError()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaSensorError.Unsubscribe();
        
        m_logger.LogVerbose() << "RPortRoa::StopSubscribesoaRoaSensorError::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaSensorError()
{
    if (m_found)
    {
        // regist callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaSensorErrorTriggered();
        };
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaSensorErrorTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaRoaSensorError.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSensorError.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaSensorError(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaSensorErrorCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaRoaSensorError.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSensorError.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaSensorError(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaSensorError(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaSensorError::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // process value logic
}
 
void RPortRoa::SubscribesoaRoaSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaRoaSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogVerbose() << "RPortRoa::SubscribesoaRoaSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaSwVersion.Unsubscribe();
        
        m_logger.LogVerbose() << "RPortRoa::StopSubscribesoaRoaSwVersion::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaSwVersion()
{
    if (m_found)
    {
        // regist callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaSwVersionTriggered();
        };
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaRoaSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaRoaSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogVerbose() << "RPortRoa::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // process value logic
}
 
} /// namespace port
} /// namespace aa
} /// namespace katech
 
/// EOF