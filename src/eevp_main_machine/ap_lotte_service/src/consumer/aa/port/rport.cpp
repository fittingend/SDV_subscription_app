///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rport.cpp
/// SOFTWARE COMPONENT NAME           : RPort
/// GENERATED DATE                    : 2024-09-10 13:37:03
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "consumer/aa/port/rport.h"
#include "lotte/type/impl_type_sidetransparency.h"

#include <cstddef>
 
namespace consumer
{
namespace aa
{
namespace port
{
 
RPort::RPort()
    : m_logger(ara::log::CreateLogger("COSM", "PORT", ara::log::LogLevel::kInfo))
    , m_running{false}
    , m_found{false}
    , m_responderDmsCurr{nullptr}
    , m_responderDmsStatus{nullptr}
    , m_responderSmartFilmControl{nullptr}
    , m_responderSmartFilmStatus{nullptr}
    , m_responderSmartFilmCurr{nullptr}
{
}
 
RPort::~RPort()
{
}
 
void RPort::Start()
{
    m_logger.LogVerbose() << "RPort::Start";
    m_logger.LogInfo() << "RPort::Start";
    // regist callback
    ara::core::InstanceSpecifier specifier{"LotteService/AA/RPort"};
    auto handler = [this](ara::com::ServiceHandleContainer<lotte::service::proxy::LotteServiceProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = lotte::service::proxy::LotteServiceProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPort::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPort::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPort::Terminate()
{
    m_logger.LogVerbose() << "RPort::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPort::Terminate::StopFindService";
    }
}
 
void RPort::Find(ara::com::ServiceHandleContainer<lotte::service::proxy::LotteServiceProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPort::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPort::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPort::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPort::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<lotte::service::proxy::LotteServiceProxy>(handles[0]);
        m_findHandle = std::make_shared<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
    }
}
 
lotte::type::DmsGzDtctn RPort::RequestDmsCurr()
{
    if (m_found)
    {
        auto request = m_interface->DmsCurr();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort::RequestDmsCurr::Responded";
            
            auto result = response.Value();
            if (m_responderDmsCurr)
            {
                m_responderDmsCurr(result);
                return result.result;
            }
            return result.result;
        }
        else
        {
            m_logger.LogError() << "RPort::RequestDmsCurr::" << response.Error().Message();
        }
    }
    lotte::type::DmsGzDtctn error;
    return error;
}
 
void RPort::RegistResponseHandlerDmsCurr(std::function<void(const lotte::service::proxy::methods::DmsCurr::Output&)> handler)
{
    m_responderDmsCurr = handler;
}
 
bool RPort::RequestDmsStatus()
{
    if (m_found)
    {
        auto request = m_interface->DmsStatus();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            auto result = response.Value();
            m_logger.LogInfo() << "RPort::RequestDmsStatus::Responded" << result.result;
            if (m_responderDmsStatus)
            {
                m_responderDmsStatus(result);
                return result.result;
            }
            return result.result;
        }
        else
        {
            m_logger.LogError() << "RPort::RequestDmsStatus::" << response.Error().Message();
            return false;
        }
    }
    return false;
}
 
void RPort::RegistResponseHandlerDmsStatus(std::function<void(const lotte::service::proxy::methods::DmsStatus::Output&)> handler)
{
    m_responderDmsStatus = handler;
}
 
void RPort::RequestSmartFilmControl(const std::int32_t& windowLoc, const std::int32_t& transparence)
{
    if (m_found)
    {
        auto request = m_interface->SmartFilmControl(windowLoc, transparence);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort::RequestSmartFilmControl::Responded";
            
            auto result = response.Value();
            if (m_responderSmartFilmControl)
            {
                m_responderSmartFilmControl(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPort::RequestSmartFilmControl::" << response.Error().Message();
        }
    }
}
 
void RPort::RegistResponseHandlerSmartFilmControl(std::function<void(const lotte::service::proxy::methods::SmartFilmControl::Output&)> handler)
{
    m_responderSmartFilmControl = handler;
}
 
bool RPort::RequestSmartFilmStatus()
{
    if (m_found)
    {
        auto request = m_interface->SmartFilmStatus();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            auto result = response.Value();
            m_logger.LogInfo() << "RPort::RequestSmartFilmStatus::Responded : " << result.result;
            if (m_responderSmartFilmStatus)
            {
                m_responderSmartFilmStatus(result);
                return result.result;
            }
            return result.result;
        }
        else
        {
            m_logger.LogError() << "RPort::RequestSmartFilmStatus::" << response.Error().Message();
            return false;
        }
    }
    return false;
}
 
void RPort::RegistResponseHandlerSmartFilmStatus(std::function<void(const lotte::service::proxy::methods::SmartFilmStatus::Output&)> handler)
{
    m_responderSmartFilmStatus = handler;
}
 
lotte::type::SideTransparency RPort::RequestSmartFilmCurr(const std::uint8_t& windowLoc)
{
    if (m_found)
    {
        auto request = m_interface->SmartFilmCurr(windowLoc);
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPort::RequestSmartFilmCurr::Responded";
            
            auto result = response.Value();
            if (m_responderSmartFilmCurr)
            {
                m_responderSmartFilmCurr(result);
                return result.result;
            }
            return result.result;
        }
        else
        {
            m_logger.LogError() << "RPort::RequestSmartFilmCurr::" << response.Error().Message();
        }
    }
    lotte::type::SideTransparency error;
    return error;
}
 
void RPort::RegistResponseHandlerSmartFilmCurr(std::function<void(const lotte::service::proxy::methods::SmartFilmCurr::Output&)> handler)
{
    m_responderSmartFilmCurr = handler;
}
 
} /// namespace port
} /// namespace aa
} /// namespace consumer
 
/// EOF