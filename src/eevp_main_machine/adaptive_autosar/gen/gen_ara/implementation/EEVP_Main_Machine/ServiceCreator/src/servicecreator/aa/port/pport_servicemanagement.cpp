///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_servicemanagement.cpp
/// SOFTWARE COMPONENT NAME           : PPort_ServiceManagement
/// GENERATED DATE                    : 2024-10-17 15:32:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "servicecreator/aa/port/pport_servicemanagement.h"
 
namespace eevp
{
namespace service
{
namespace skeleton
{
 
PPort_ServiceManagementSkeletonImpl::PPort_ServiceManagementSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : ServiceManagementSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SVCC", "PORT", ara::log::LogLevel::kVerbose))
{
    auto wiperrecv_get_handler = [this]() {
        return GetWiperRecv();
    };
    WiperRecv.RegisterGetHandler(wiperrecv_get_handler);
    
    auto wipersend_get_handler = [this]() {
        return GetWiperSend();
    };
    WiperSend.RegisterGetHandler(wipersend_get_handler);
}
 
ara::core::Future<fields::WiperRecv::FieldType> PPort_ServiceManagementSkeletonImpl::GetWiperRecv()
{
    ara::core::Promise<fields::WiperRecv::FieldType> promise;
    
    promise.set_value(m_WiperRecv);
    return promise.get_future();
}
 
void PPort_ServiceManagementSkeletonImpl::NotifyWiperRecv()
{
    auto notify = WiperRecv.Update(m_WiperRecv);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_ServiceManagement::NotifyWiperRecv::Update";
    }
    else
    {
        m_logger.LogVerbose() << "PPort_ServiceManagement::NotifyWiperRecv::Update::" << notify.Error().Message();
    }
}
 
void PPort_ServiceManagementSkeletonImpl::UpdateWiperRecv(const fields::WiperRecv::FieldType& value)
{
    m_WiperRecv = value;
}
 
ara::core::Future<fields::WiperSend::FieldType> PPort_ServiceManagementSkeletonImpl::GetWiperSend()
{
    ara::core::Promise<fields::WiperSend::FieldType> promise;
    
    promise.set_value(m_WiperSend);
    return promise.get_future();
}
 
void PPort_ServiceManagementSkeletonImpl::NotifyWiperSend()
{
    auto notify = WiperSend.Update(m_WiperSend);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "PPort_ServiceManagement::NotifyWiperSend::Update";
    }
    else
    {
        m_logger.LogVerbose() << "PPort_ServiceManagement::NotifyWiperSend::Update::" << notify.Error().Message();
    }
}
 
void PPort_ServiceManagementSkeletonImpl::UpdateWiperSend(const fields::WiperSend::FieldType& value)
{
    m_WiperSend = value;
}
 
} /// namespace skeleton
} /// namespace service
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
PPort_ServiceManagement::PPort_ServiceManagement()
    : m_logger(ara::log::CreateLogger("SVCC", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_ServiceManagement::~PPort_ServiceManagement()
{
}
 
void PPort_ServiceManagement::Start()
{
    m_logger.LogVerbose() << "PPort_ServiceManagement::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"ServiceCreator/AA/PPort_ServiceManagement"};
    m_interface = std::make_shared<eevp::service::skeleton::ServiceManagementSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_ServiceManagement::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_ServiceManagement::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_ServiceManagement::Terminate()
{
    m_logger.LogVerbose() << "PPort_ServiceManagement::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_ServiceManagement::Terminate::StopOfferService";
}
 
void PPort_ServiceManagement::WriteValueWiperRecv(const eevp::service::skeleton::fields::WiperRecv::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->UpdateWiperRecv(value);
}
 
void PPort_ServiceManagement::NotifyFieldWiperRecvCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            m_interface->NotifyWiperRecv();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_ServiceManagement::NotifyFieldWiperRecvTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->NotifyWiperRecv();
}
 
void PPort_ServiceManagement::NotifyFieldWiperRecvTriggered(const eevp::service::skeleton::fields::WiperRecv::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->UpdateWiperRecv(value);
    m_interface->NotifyWiperRecv();
}
 
void PPort_ServiceManagement::WriteValueWiperSend(const eevp::service::skeleton::fields::WiperSend::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->UpdateWiperSend(value);
}
 
void PPort_ServiceManagement::NotifyFieldWiperSendCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            m_interface->NotifyWiperSend();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_ServiceManagement::NotifyFieldWiperSendTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->NotifyWiperSend();
}
 
void PPort_ServiceManagement::NotifyFieldWiperSendTriggered(const eevp::service::skeleton::fields::WiperSend::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->UpdateWiperSend(value);
    m_interface->NotifyWiperSend();
}
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
/// EOF