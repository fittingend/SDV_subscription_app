///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : intelligentwiper.cpp
/// SOFTWARE COMPONENT NAME           : IntelligentWiper
/// GENERATED DATE                    : 2025-08-07 19:04:14
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "intelligentwiper/aa/intelligentwiper.h"
 
namespace intelligentwiper
{
namespace aa
{
 
IntelligentWiper::IntelligentWiper()
    : m_logger(ara::log::CreateLogger("INTW", "INTW", ara::log::LogLevel::kInfo))
    , m_running{false}
    , m_workers(3)
{
}
 
IntelligentWiper::~IntelligentWiper()
{
}
 
bool IntelligentWiper::Initialize()
{
    m_logger.LogInfo() << "IntelligentWiper::Initialize";
    
    bool init = true;
    
    m_RPortWiper = std::make_unique<intelligentwiper::aa::port::RPortWiper>();
    
    // put your code for initialization
    
    return init;
}
 
void IntelligentWiper::Start()
{
    m_logger.LogInfo() << "IntelligentWiper::Start";
    
    m_RPortWiper->Start();
}
 
void IntelligentWiper::Terminate()
{
    m_logger.LogInfo() << "IntelligentWiper::Terminate";
    
    // stop running
    m_running = false;
    
    m_RPortWiper->Terminate();
}
 
void IntelligentWiper::Run()
{
while (1)
    {
        m_logger.LogInfo() << "IntelligentWiper::Run";
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
    
    
    // start running
    m_running = true;
    
    m_workers.Async([this] { m_RPortWiper->ReceiveFieldsoaWiperDeviceNormalCyclic(); });
    m_workers.Async([this] { m_RPortWiper->ReceiveFieldsoaWiperStatusCyclic(); });
    m_workers.Async([this] { m_RPortWiper->ReceiveFieldsoaWiperSwVersionCyclic(); });
    
    m_workers.Wait();
}
 
} /// namespace aa
} /// namespace intelligentwiper
