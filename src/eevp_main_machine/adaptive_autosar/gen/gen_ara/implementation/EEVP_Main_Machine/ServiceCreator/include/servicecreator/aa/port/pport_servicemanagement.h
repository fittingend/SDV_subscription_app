///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_servicemanagement.h
/// SOFTWARE COMPONENT NAME           : PPort_ServiceManagement
/// GENERATED DATE                    : 2024-10-17 15:32:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_SERVICEMANAGEMENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_SERVICEMANAGEMENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/service/servicemanagement_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace eevp
{
namespace service
{
namespace skeleton
{
 
class PPort_ServiceManagementSkeletonImpl : public ServiceManagementSkeleton
{
public:
    /// @brief Constructor
    PPort_ServiceManagementSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Getter for field, WiperRecv
    ara::core::Future<fields::WiperRecv::FieldType> GetWiperRecv();
    
    /// @brief Notifier for field, WiperRecv
    void NotifyWiperRecv();
    
    /// @brief Update field value by software component, WiperRecv
    void UpdateWiperRecv(const fields::WiperRecv::FieldType& value);
    
    /// @brief Getter for field, WiperSend
    ara::core::Future<fields::WiperSend::FieldType> GetWiperSend();
    
    /// @brief Notifier for field, WiperSend
    void NotifyWiperSend();
    
    /// @brief Update field value by software component, WiperSend
    void UpdateWiperSend(const fields::WiperSend::FieldType& value);
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, WiperRecv
    fields::WiperRecv::FieldType m_WiperRecv;
    
    /// @brief Field, WiperSend
    fields::WiperSend::FieldType m_WiperSend;
};
 
} /// namespace skeleton
} /// namespace service
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
class PPort_ServiceManagement
{
public:
    /// @brief Constructor
    PPort_ServiceManagement();
    
    /// @brief Destructor
    ~PPort_ServiceManagement();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write field value to buffer, WiperRecv
    void WriteValueWiperRecv(const eevp::service::skeleton::fields::WiperRecv::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, WiperRecv
    void NotifyFieldWiperRecvCyclic();
     
    /// @brief Notify field directly from buffer data, WiperRecv
    void NotifyFieldWiperRecvTriggered();
     
    /// @brief Notify field directly with argument, WiperRecv
    void NotifyFieldWiperRecvTriggered(const eevp::service::skeleton::fields::WiperRecv::FieldType& value);
     
    
    /// @brief Write field value to buffer, WiperSend
    void WriteValueWiperSend(const eevp::service::skeleton::fields::WiperSend::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, WiperSend
    void NotifyFieldWiperSendCyclic();
     
    /// @brief Notify field directly from buffer data, WiperSend
    void NotifyFieldWiperSendTriggered();
     
    /// @brief Notify field directly with argument, WiperSend
    void NotifyFieldWiperSendTriggered(const eevp::service::skeleton::fields::WiperSend::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::shared_ptr<eevp::service::skeleton::ServiceManagementSkeletonImpl> m_interface;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SERVICECREATOR_AA_PPORT_SERVICEMANAGEMENT_H