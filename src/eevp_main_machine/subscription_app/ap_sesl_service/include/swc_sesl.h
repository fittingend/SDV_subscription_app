///////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.
///
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : swc_sesl.h
/// SOFTWARE COMPONENT NAME           : SWC_SESL
/// GENERATED DATE                    : 2024-11-15 21:01:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_SESL_EXECUTABLE_ROOTSWCOMPONENT_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_SESL_EXECUTABLE_ROOTSWCOMPONENT_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <queue>
#include <mutex>
#include <condition_variable>

#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#include <csignal>
#include <thread>

#include <ara/log/logger.h>

#include <ara/exec/execution_client.h>

#include "port/rport.h"

namespace sesl_executable
{
    namespace rootswcomponent
    {

        class SWC_SESL
        {
        public:
            /// @brief Constructor
            SWC_SESL();

            /// @brief Destructor
            ~SWC_SESL();

            /// @brief Start software component
            bool Start();

            /// @brief Terminate software component
            void Terminate();

            /// @brief Run software component
            void Run();

        private:
            /// @brief Signal Handler
            static void SignalHandler(std::int32_t signal);

            bool setRunningState();

            bool startSESLProxy();

            /// @brief Running status of software component
            static std::atomic_bool mRunning;

            /// @brief Logger for software component
            ara::log::Logger &mLogger;

            /// @brief Instance of Port {SWC_SESL.RPort}
            std::shared_ptr<sesl_executable::rootswcomponent::port::RPort> m_RPort;
        };

    } /// namespace rootswcomponent
} /// namespace sesl_executable

#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_SESL_EXECUTABLE_ROOTSWCOMPONENT_H