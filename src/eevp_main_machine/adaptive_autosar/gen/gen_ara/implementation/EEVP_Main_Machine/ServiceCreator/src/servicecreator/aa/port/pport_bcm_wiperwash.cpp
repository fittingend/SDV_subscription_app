///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_bcm_wiperwash.cpp
/// SOFTWARE COMPONENT NAME           : PPort_BCM_WiperWash
/// GENERATED DATE                    : 2024-10-17 15:32:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "servicecreator/aa/port/pport_bcm_wiperwash.h"
 
namespace eevp
{
namespace simulation
{
namespace skeleton
{
 
PPort_BCM_WiperWashSkeletonImpl::PPort_BCM_WiperWashSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : BCM_WiperWashSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SVCC", "PORT", ara::log::LogLevel::kVerbose))
{
}
 
ara::core::Future<BCM_WiperWashSkeleton::getWipingIntervalOutput> PPort_BCM_WiperWashSkeletonImpl::getWipingInterval()
{
    getWipingIntervalOutput response;
    ara::core::Promise<getWipingIntervalOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::getWipingLevelOutput> PPort_BCM_WiperWashSkeletonImpl::getWipingLevel()
{
    getWipingLevelOutput response;
    ara::core::Promise<getWipingLevelOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::isWipingOutput> PPort_BCM_WiperWashSkeletonImpl::isWiping()
{
    isWipingOutput response;
    ara::core::Promise<isWipingOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::notifyWipingStatusOutput> PPort_BCM_WiperWashSkeletonImpl::notifyWipingStatus()
{
    notifyWipingStatusOutput response;
    ara::core::Promise<notifyWipingStatusOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::setWipingIntervalOutput> PPort_BCM_WiperWashSkeletonImpl::setWipingInterval(const std::uint16_t& wipingInterval)
{
    setWipingIntervalOutput response;
    ara::core::Promise<setWipingIntervalOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::setWipingLevelOutput> PPort_BCM_WiperWashSkeletonImpl::setWipingLevel(const eevp::simulation::BCM_WipingLevel& wipingLevel)
{
    setWipingLevelOutput response;
    ara::core::Promise<setWipingLevelOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::setWipingLevelImmeOutput> PPort_BCM_WiperWashSkeletonImpl::setWipingLevelImme(const eevp::simulation::BCM_WipingLevel& wipingLevel)
{
    setWipingLevelImmeOutput response;
    ara::core::Promise<setWipingLevelImmeOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::startWipingOutput> PPort_BCM_WiperWashSkeletonImpl::startWiping()
{
    startWipingOutput response;
    ara::core::Promise<startWipingOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<BCM_WiperWashSkeleton::stopWipingOutput> PPort_BCM_WiperWashSkeletonImpl::stopWiping()
{
    stopWipingOutput response;
    ara::core::Promise<stopWipingOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
} /// namespace skeleton
} /// namespace simulation
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
PPort_BCM_WiperWash::PPort_BCM_WiperWash()
    : m_logger(ara::log::CreateLogger("SVCC", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_BCM_WiperWash::~PPort_BCM_WiperWash()
{
}
 
void PPort_BCM_WiperWash::Start()
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"ServiceCreator/AA/PPort_BCM_WiperWash"};
    m_interface = std::make_shared<eevp::simulation::skeleton::BCM_WiperWashSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_BCM_WiperWash::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_BCM_WiperWash::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_BCM_WiperWash::Terminate()
{
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_BCM_WiperWash::Terminate::StopOfferService";
}
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
/// EOF