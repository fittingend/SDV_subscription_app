///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : pport_msginfosrv.cpp
/// SOFTWARE COMPONENT NAME           : PPort_MsgInfoSrv
/// GENERATED DATE                    : 2024-10-17 15:32:20
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "servicecreator/aa/port/pport_msginfosrv.h"
 
namespace eevp
{
namespace simulation
{
namespace skeleton
{
 
PPort_MsgInfoSrvSkeletonImpl::PPort_MsgInfoSrvSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : MsgInfoSrvSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SVCC", "PORT", ara::log::LogLevel::kVerbose))
{
}
 
} /// namespace skeleton
} /// namespace simulation
} /// namespace eevp

namespace servicecreator
{
namespace aa
{
namespace port
{
 
PPort_MsgInfoSrv::PPort_MsgInfoSrv()
    : m_logger(ara::log::CreateLogger("SVCC", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
PPort_MsgInfoSrv::~PPort_MsgInfoSrv()
{
}
 
void PPort_MsgInfoSrv::Start()
{
    m_logger.LogVerbose() << "PPort_MsgInfoSrv::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"ServiceCreator/AA/PPort_MsgInfoSrv"};
    m_interface = std::make_shared<eevp::simulation::skeleton::MsgInfoSrvSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "PPort_MsgInfoSrv::Start::OfferService::" << offer.Error().Message();
    }
}
 
void PPort_MsgInfoSrv::Terminate()
{
    m_logger.LogVerbose() << "PPort_MsgInfoSrv::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "PPort_MsgInfoSrv::Terminate::StopOfferService";
}
 
void PPort_MsgInfoSrv::WriteDataT_MSGINFO(const eevp::simulation::skeleton::events::T_MSGINFO::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_T_MSGINFOData = data;
}
 
void PPort_MsgInfoSrv::SendEventT_MSGINFOCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            auto send = m_interface->T_MSGINFO.Send(m_T_MSGINFOData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventT_MSGINFOCyclic::Send";
            }
            else
            {
                m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventT_MSGINFOCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_MsgInfoSrv::SendEventT_MSGINFOTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    auto send = m_interface->T_MSGINFO.Send(m_T_MSGINFOData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventT_MSGINFOTriggered::Send";
    }
    else
    {
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventT_MSGINFOTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_MsgInfoSrv::SendEventT_MSGINFOTriggered(const eevp::simulation::skeleton::events::T_MSGINFO::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_T_MSGINFOData = data;
    auto send = m_interface->T_MSGINFO.Send(m_T_MSGINFOData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventT_MSGINFOTriggered::Send";
    }
    else
    {
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventT_MSGINFOTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_MsgInfoSrv::WriteDataems_MsgInfo(const eevp::simulation::skeleton::events::ems_MsgInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_ems_MsgInfoData = data;
}
 
void PPort_MsgInfoSrv::SendEventems_MsgInfoCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            auto send = m_interface->ems_MsgInfo.Send(m_ems_MsgInfoData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventems_MsgInfoCyclic::Send";
            }
            else
            {
                m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventems_MsgInfoCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void PPort_MsgInfoSrv::SendEventems_MsgInfoTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    auto send = m_interface->ems_MsgInfo.Send(m_ems_MsgInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventems_MsgInfoTriggered::Send";
    }
    else
    {
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventems_MsgInfoTriggered::Send::" << send.Error().Message();
    }
}
 
void PPort_MsgInfoSrv::SendEventems_MsgInfoTriggered(const eevp::simulation::skeleton::events::ems_MsgInfo::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_ems_MsgInfoData = data;
    auto send = m_interface->ems_MsgInfo.Send(m_ems_MsgInfoData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventems_MsgInfoTriggered::Send";
    }
    else
    {
        m_logger.LogVerbose() << "PPort_MsgInfoSrv::SendEventems_MsgInfoTriggered::Send::" << send.Error().Message();
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace servicecreator
 
/// EOF