///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : r_bmsinfo.cpp
/// SOFTWARE COMPONENT NAME           : R_BmsInfo
/// GENERATED DATE                    : 2024-08-28 09:41:38
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "batterymonitor/aa/port/r_bmsinfo.h"
 
namespace batterymonitor
{
namespace aa
{
namespace port
{
 
R_BmsInfo::R_BmsInfo()
    : m_logger(ara::log::CreateLogger("CtxBatteryMonitor", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
{
}
 
R_BmsInfo::~R_BmsInfo()
{
}

bool R_BmsInfo::IsReady2Run() {
    //std::lock_guard<std::mutex> lock(m_mutex);
    return m_found;
}
 
void R_BmsInfo::Start()
{
    m_logger.LogVerbose() << "R_BmsInfo::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"BatteryMonitor/AA/R_BmsInfo"};
    auto handler = [this](ara::com::ServiceHandleContainer<battery::bmsinfo::proxy::BmsInfoSrvProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = battery::bmsinfo::proxy::BmsInfoSrvProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "R_BmsInfo::Start::StartFindService";
    }
    else
    {
        m_logger.LogVerbose() << "R_BmsInfo::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void R_BmsInfo::Terminate()
{
    m_logger.LogVerbose() << "R_BmsInfo::Terminate";
    
    // stop port
    m_running = false;
    
    // clear consumer
    if (m_interface)
    {
        // stop subscribe
        StopSubscribeems_BmsInfo();
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "R_BmsInfo::Terminate::StopFindService";
    }
}
 
void R_BmsInfo::Find(ara::com::ServiceHandleContainer<battery::bmsinfo::proxy::BmsInfoSrvProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "R_BmsInfo::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "R_BmsInfo::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "R_BmsInfo::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "R_BmsInfo::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_shared<battery::bmsinfo::proxy::BmsInfoSrvProxy>(handles[0]);
        m_findHandle = std::make_shared<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        // subscribe events
        Subscribeems_BmsInfo();
    }
}
 
void R_BmsInfo::Subscribeems_BmsInfo()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        RegistReceiverems_BmsInfo();
        
        // request subscribe
        auto subscribe = m_interface->ems_BmsInfo.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "R_BmsInfo::Subscribeems_BmsInfo::Subscribed";
        }
        else
        {
            m_logger.LogVerbose() << "R_BmsInfo::Subscribeems_BmsInfo::" << subscribe.Error().Message();
        }
    }
}
 
void R_BmsInfo::StopSubscribeems_BmsInfo()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->ems_BmsInfo.Unsubscribe();
        
        m_logger.LogVerbose() << "R_BmsInfo::StopSubscribeems_BmsInfo::Unsubscribed";
    }
}
 
void R_BmsInfo::RegistReceiverems_BmsInfo()
{
    if (m_found)
    {
        // regist callback
        auto receiver = [this]() -> void {
            return ReceiveEventems_BmsInfoTriggered();
        };

        auto result = m_interface->ems_BmsInfo.SetReceiveHandler(receiver);
    }
}
 
void R_BmsInfo::ReceiveEventems_BmsInfoTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->ems_BmsInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->ems_BmsInfo.GetNewSamples([&](auto samplePtr) {
                R_BmsInfo::ReadDataems_BmsInfo(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "<R1> RPort::ReceiveBmsInfo::GetNewSamples::" << recv->Value() <<" : Triggered R1"<<"\n"
                << "DataSerialNumber: " << vDataSerialNumber << "\n"
                << "EMS_BatteryAvgTemperature: " << vEMS_BatteryAvgTemperature << "\n"
                << "EMS_ChargerOutputVolt: " << vEMS_ChargerOutputVolt << "\n"
                << "EMS_ChargerOutputCurr: " << vEMS_ChargerOutputCurr << "\n"
                << "EMS_ReturnCode: " << vEMS_ReturnCode << "\n"
                << "EMS_ConnectionStatus: " << vEMS_ConnectionStatus << "\n"
                << "EMS_TargetVolt: " << vEMS_TargetVolt << "\n"
                << "EMS_TargetCurr: " << vEMS_TargetCurr << "\n"
                << "EMS_RemainHour: " << vEMS_RemainHour << "\n"
                << "EMS_RemainMin: " << vEMS_RemainMin << "\n"
                << "EMS_HVBattSOC: " << vEMS_HVBattSOC << "\n"
                << "EMS_HVBattSOE: " << vEMS_HVBattSOE << "\n"
                << "EMS_HVBattSOH: " << vEMS_HVBattSOH << "\n"
                << "EMS_BattVolt: " << vEMS_BattVolt << "\n"
                << "EMS_BattCurr: " << vEMS_BattCurr << "\n"
                << "EMS_Obc_dcVolt: " << vEMS_Obc_dcVolt << "\n"
                << "EMS_Obc_dcCurr: " << vEMS_Obc_dcCurr << "\n"
                << "EMS_Avn_ChargeCurrSetSts: " << vEMS_Avn_ChargeCurrSetSts << "\n"
                << "EMS_HVBatt_MainRlyCloseReq: " << vEMS_HVBatt_MainRlyCloseReq << "\n"
                << "EMS_HVBatt_preChrgRlyStatus: " << vEMS_HVBatt_preChrgRlyStatus << "\n"
                << "EMS_HVBatt_posRlyStatus: " << vEMS_HVBatt_posRlyStatus << "\n"
                << "EMS_HVBatt_negRlyStatus: " << vEMS_HVBatt_negRlyStatus << "\n"
                << "EMS_Avn_DcChargingTargetSetSts: " << vEMS_Avn_DcChargingTargetSetSts << "\n"
                << "EMS_Avn_AcChargingTargetSetSts: " << vEMS_Avn_AcChargingTargetSetSts << "\n";

                //Start
                if((vEMS_HVBatt_MainRlyCloseReq==1u&&vEMS_RemainHour!=0&&vEMS_RemainMin!=0) ||
                    (vEMS_HVBatt_MainRlyCloseReq==1u&&vEMS_RemainHour!=31&&vEMS_RemainMin!=63))
                {
                    if(vStartFlag == 0)          //serial number 저장을 위함
                    {
                        vStartFlag = 1;
                        vFinishFlag = 0;
                        vLastSerialNumber = vDataSerialNumber;
                    }
                }

                //OnCharging
                if(vEMS_HVBatt_MainRlyCloseReq_Prev == 1 && vEMS_HVBatt_MainRlyCloseReq == 1)
                {
                	if(vDataSerialNumber == vLastSerialNumber)
                	{
                		//Missing Now;
					}
                    else if(vDataSerialNumber == vLastSerialNumber + 1)
                    {
                        vGetCount ++;
                        vLastSerialNumber = vDataSerialNumber;
                    }
                    else
                    {
                        vMissedCount = vDataSerialNumber - vLastSerialNumber - 1;
                        vLastSerialNumber = vDataSerialNumber;
                    }
                }

                //Finish
                if(vEMS_HVBatt_MainRlyCloseReq_Prev == 1 && vEMS_HVBatt_MainRlyCloseReq == 0)
                {
                    if(vFinishFlag == 0)
                    {
                        vStartFlag = 0;
                        vFinishFlag = 1;
                    }
                }

                vEMS_HVBatt_MainRlyCloseReq_Prev = vEMS_HVBatt_MainRlyCloseReq ;
            }
            else
            {
                m_logger.LogVerbose() << "R_BmsInfo::ReceiveEventems_BmsInfo::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void R_BmsInfo::ReceiveEventems_BmsInfoCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->ems_BmsInfo.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->ems_BmsInfo.GetNewSamples([&](auto samplePtr) {
                    R_BmsInfo::ReadDataems_BmsInfo(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "R_BmsInfo::ReceiveEventems_BmsInfo::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogVerbose() << "R_BmsInfo::ReceiveEventems_BmsInfo::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void R_BmsInfo::ReadDataems_BmsInfo(ara::com::SamplePtr<battery::bmsinfo::proxy::events::ems_BmsInfo::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    // process data logic
    vDataSerialNumber = data.DataSerialNumber;
    vEMS_BatteryAvgTemperature = data.EMS_BatteryAvgTemperature;
    vEMS_ChargerOutputVolt = data.EMS_ChargerOutputVolt;
    vEMS_ChargerOutputCurr = data.EMS_ChargerOutputCurr;
    vEMS_ReturnCode = data.EMS_ReturnCode;
    vEMS_ConnectionStatus = data.EMS_ConnectionStatus;
    vEMS_TargetVolt = data.EMS_TargetVolt;
    vEMS_TargetCurr = data.EMS_TargetCurr;
    vEMS_RemainHour = data.EMS_RemainHour;
    vEMS_RemainMin = data.EMS_RemainMin;
    vEMS_HVBattSOC = data.EMS_HVBattSOC;
    vEMS_HVBattSOE = data.EMS_HVBattSOE;
    vEMS_HVBattSOH = data.EMS_HVBattSOH;
    vEMS_BattVolt = data.EMS_BattVolt;
    vEMS_BattCurr = data.EMS_BattCurr;
    vEMS_Obc_dcVolt = data.EMS_Obc_dcVolt;
    vEMS_Obc_dcCurr = data.EMS_Obc_dcCurr;
    vEMS_Avn_ChargeCurrSetSts = data.EMS_Avn_ChargeCurrSetSts;
    vEMS_HVBatt_MainRlyCloseReq = data.EMS_HVBatt_MainRlyCloseReq;
    vEMS_HVBatt_preChrgRlyStatus = data.EMS_HVBatt_preChrgRlyStatus;
    vEMS_HVBatt_posRlyStatus = data.EMS_HVBatt_posRlyStatus;
    vEMS_HVBatt_negRlyStatus = data.EMS_HVBatt_negRlyStatus;
    vEMS_Avn_DcChargingTargetSetSts = data.EMS_Avn_DcChargingTargetSetSts;
    vEMS_Avn_AcChargingTargetSetSts = data.EMS_Avn_AcChargingTargetSetSts;
}
 
} /// namespace port
} /// namespace aa
} /// namespace batterymonitor
 
/// EOF