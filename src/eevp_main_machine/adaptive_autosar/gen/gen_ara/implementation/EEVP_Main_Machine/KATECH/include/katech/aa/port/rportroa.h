///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportroa.h
/// SOFTWARE COMPONENT NAME           : RPortRoa
/// GENERATED DATE                    : 2025-07-18 17:10:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_KATECH_AA_RPORTROA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_KATECH_AA_RPORTROA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soaroa_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace katech
{
namespace aa
{
namespace port
{
 
class RPortRoa
{
public:
    /// @brief Constructor
    RPortRoa();
    
    /// @brief Destructor
    ~RPortRoa();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();

    /// @brief Subscribe field notification, soaRoaDetectCount
    void SubscribesoaRoaDetectCount();
     
    /// @brief Stop field subscription, soaRoaDetectCount
    void StopSubscribesoaRoaDetectCount();
     
    /// @brief Field notification receive handler, soaRoaDetectCount
    void ReceiveFieldsoaRoaDetectCountTriggered();
     
    /// @brief Field notification receive handler, soaRoaDetectCount
    void ReceiveFieldsoaRoaDetectCountCyclic();
     
    /// @brief Read field notification value, soaRoaDetectCount
    void ReadValuesoaRoaDetectCount(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDetectCount::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaDetectCount(std::function<void(const eevp::control::proxy::fields::soaRoaDetectCount::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaDetectCount
    void GetsoaRoaDetectCount();
    
    /// @brief Subscribe field notification, soaRoaDetectState
    void SubscribesoaRoaDetectState();
     
    /// @brief Stop field subscription, soaRoaDetectState
    void StopSubscribesoaRoaDetectState();
     
    /// @brief Field notification receive handler, soaRoaDetectState
    void ReceiveFieldsoaRoaDetectStateTriggered();
     
    /// @brief Field notification receive handler, soaRoaDetectState
    void ReceiveFieldsoaRoaDetectStateCyclic();
     
    /// @brief Read field notification value, soaRoaDetectState
    void ReadValuesoaRoaDetectState(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDetectState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaDetectState(std::function<void(const eevp::control::proxy::fields::soaRoaDetectState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaDetectState
    void GetsoaRoaDetectState();
    
    /// @brief Subscribe field notification, soaRoaDeviceNormal
    void SubscribesoaRoaDeviceNormal();
     
    /// @brief Stop field subscription, soaRoaDeviceNormal
    void StopSubscribesoaRoaDeviceNormal();
     
    /// @brief Field notification receive handler, soaRoaDeviceNormal
    void ReceiveFieldsoaRoaDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaRoaDeviceNormal
    void ReceiveFieldsoaRoaDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaRoaDeviceNormal
    void ReadValuesoaRoaDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDeviceNormal::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaRoaDeviceNormal::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaDeviceNormal
    void GetsoaRoaDeviceNormal();
    
    /// @brief Subscribe field notification, soaRoaMode
    void SubscribesoaRoaMode();
     
    /// @brief Stop field subscription, soaRoaMode
    void StopSubscribesoaRoaMode();
     
    /// @brief Field notification receive handler, soaRoaMode
    void ReceiveFieldsoaRoaModeTriggered();
     
    /// @brief Field notification receive handler, soaRoaMode
    void ReceiveFieldsoaRoaModeCyclic();
     
    /// @brief Read field notification value, soaRoaMode
    void ReadValuesoaRoaMode(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaMode::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaMode(std::function<void(const eevp::control::proxy::fields::soaRoaMode::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaMode
    void GetsoaRoaMode();
    
    /// @brief Subscribe field notification, soaRoaRunningState
    void SubscribesoaRoaRunningState();
     
    /// @brief Stop field subscription, soaRoaRunningState
    void StopSubscribesoaRoaRunningState();
     
    /// @brief Field notification receive handler, soaRoaRunningState
    void ReceiveFieldsoaRoaRunningStateTriggered();
     
    /// @brief Field notification receive handler, soaRoaRunningState
    void ReceiveFieldsoaRoaRunningStateCyclic();
     
    /// @brief Read field notification value, soaRoaRunningState
    void ReadValuesoaRoaRunningState(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaRunningState::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaRunningState(std::function<void(const eevp::control::proxy::fields::soaRoaRunningState::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaRunningState
    void GetsoaRoaRunningState();
    
    /// @brief Subscribe field notification, soaRoaSensorError
    void SubscribesoaRoaSensorError();
     
    /// @brief Stop field subscription, soaRoaSensorError
    void StopSubscribesoaRoaSensorError();
     
    /// @brief Field notification receive handler, soaRoaSensorError
    void ReceiveFieldsoaRoaSensorErrorTriggered();
     
    /// @brief Field notification receive handler, soaRoaSensorError
    void ReceiveFieldsoaRoaSensorErrorCyclic();
     
    /// @brief Read field notification value, soaRoaSensorError
    void ReadValuesoaRoaSensorError(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaSensorError::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaSensorError(std::function<void(const eevp::control::proxy::fields::soaRoaSensorError::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaSensorError
    void GetsoaRoaSensorError();
    
    /// @brief Subscribe field notification, soaRoaSwVersion
    void SubscribesoaRoaSwVersion();
     
    /// @brief Stop field subscription, soaRoaSwVersion
    void StopSubscribesoaRoaSwVersion();
     
    /// @brief Field notification receive handler, soaRoaSwVersion
    void ReceiveFieldsoaRoaSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaRoaSwVersion
    void ReceiveFieldsoaRoaSwVersionCyclic();
     
    /// @brief Read field notification value, soaRoaSwVersion
    void ReadValuesoaRoaSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaSwVersion::FieldType const> samplePtr);
     
    /// @brief Regist callback from software component
    void RegistFieldHandlersoaRoaSwVersion(std::function<void(const eevp::control::proxy::fields::soaRoaSwVersion::FieldType&)> handler);
    
    /// @brief Getter method using by software component, soaRoaSwVersion
    void GetsoaRoaSwVersion();
    
    /// @brief Fire and Forget method using by software component, ResetRoaDetectInfo
    void RequestResetRoaDetectInfo();
    
    /// @brief Fire and Forget method using by software component, SetRoaMode
    void RequestSetRoaMode(const eevp::control::SoaRoaMode& mode);
    
    /// @brief Fire and Forget method using by software component, StartRoa
    void RequestStartRoa();
    
    /// @brief Fire and Forget method using by software component, StopRoa
    void RequestStopRoa();
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaRoaProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);

    /// @brief Callback for field notification receiver, soaRoaDetectCount
    void RegistReceiversoaRoaDetectCount();
    
    /// @brief Callback for field notification receiver, soaRoaDetectState
    void RegistReceiversoaRoaDetectState();
    
    /// @brief Callback for field notification receiver, soaRoaDeviceNormal
    void RegistReceiversoaRoaDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaRoaMode
    void RegistReceiversoaRoaMode();
    
    /// @brief Callback for field notification receiver, soaRoaRunningState
    void RegistReceiversoaRoaRunningState();
    
    /// @brief Callback for field notification receiver, soaRoaSensorError
    void RegistReceiversoaRoaSensorError();
    
    /// @brief Callback for field notification receiver, soaRoaSwVersion
    void RegistReceiversoaRoaSwVersion();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::unique_ptr<eevp::control::proxy::SoaRoaProxy> m_interface;
    
    /// @brief Find service handle
    std::unique_ptr<ara::com::FindServiceHandle> m_findHandle;

    /// @brief Callback from software component, soaRoaDetectCount
    std::function<void(const eevp::control::proxy::fields::soaRoaDetectCount::FieldType&)> m_receiversoaRoaDetectCount;
    
    /// @brief Callback from software component, soaRoaDetectState
    std::function<void(const eevp::control::proxy::fields::soaRoaDetectState::FieldType&)> m_receiversoaRoaDetectState;
    
    /// @brief Callback from software component, soaRoaDeviceNormal
    std::function<void(const eevp::control::proxy::fields::soaRoaDeviceNormal::FieldType&)> m_receiversoaRoaDeviceNormal;
    
    /// @brief Callback from software component, soaRoaMode
    std::function<void(const eevp::control::proxy::fields::soaRoaMode::FieldType&)> m_receiversoaRoaMode;
    
    /// @brief Callback from software component, soaRoaRunningState
    std::function<void(const eevp::control::proxy::fields::soaRoaRunningState::FieldType&)> m_receiversoaRoaRunningState;
    
    /// @brief Callback from software component, soaRoaSensorError
    std::function<void(const eevp::control::proxy::fields::soaRoaSensorError::FieldType&)> m_receiversoaRoaSensorError;
    
    /// @brief Callback from software component, soaRoaSwVersion
    std::function<void(const eevp::control::proxy::fields::soaRoaSwVersion::FieldType&)> m_receiversoaRoaSwVersion;
    
};
 
} /// namespace port
} /// namespace aa
} /// namespace katech
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_KATECH_AA_RPORTROA_H