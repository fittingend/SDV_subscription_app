///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : r_lmpctrl.cpp
/// SOFTWARE COMPONENT NAME           : R_LmpCtrl
/// GENERATED DATE                    : 2024-08-28 09:41:38
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "batterymonitor/aa/port/r_lmpctrl.h"
 
namespace batterymonitor
{
namespace aa
{
namespace port
{
 
R_LmpCtrl::R_LmpCtrl()
    : m_logger(ara::log::CreateLogger("CtxBatteryMonitor", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
{
}
 
R_LmpCtrl::~R_LmpCtrl()
{
}
 
void R_LmpCtrl::Start()
{
    m_logger.LogVerbose() << "R_LmpCtrl::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"BatteryMonitor/AA/R_LmpCtrl"};
    auto handler = [this](ara::com::ServiceHandleContainer<lmp::control::proxy::EevpControlSoaMImProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = lmp::control::proxy::EevpControlSoaMImProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "R_LmpCtrl::Start::StartFindService";
    }
    else
    {
        m_logger.LogVerbose() << "R_LmpCtrl::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void R_LmpCtrl::Terminate()
{
    m_logger.LogVerbose() << "R_LmpCtrl::Terminate";
    
    // stop port
    m_running = false;
    
    // clear consumer
    if (m_interface)
    {
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "R_LmpCtrl::Terminate::StopFindService";
    }
}
 
void R_LmpCtrl::Find(ara::com::ServiceHandleContainer<lmp::control::proxy::EevpControlSoaMImProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "R_LmpCtrl::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "R_LmpCtrl::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "R_LmpCtrl::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "R_LmpCtrl::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_shared<lmp::control::proxy::EevpControlSoaMImProxy>(handles[0]);
        m_findHandle = std::make_shared<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
    }
}

void R_LmpCtrl::MethodRequestCyclic()
{
    static uint8_t StartFlag_Prev = 0;
    static uint8_t FinishFlag_Prev = 0;

    while(m_running)
    {
        if (m_found && m_interface)
	    {
            //시작
            if(StartFlag_Prev == 0 && vStartFlag == 1)
            {
                auto requestBrightness = m_interface->RequestMImSetBrightness(0x09);
                m_logger.LogInfo() <<"request brightness 9";
                lmp::mode::SoaMImMoodeMode type =  lmp::mode::SoaMImMoodeMode::kVITALITY_MOOD;
                auto requestMood = m_interface->RequestMImSetMode(type);
            
                auto requestColor = m_interface->RequestMImSetRGBColor(1u);
            }

            //종료
            if(FinishFlag_Prev == 0 && vFinishFlag == 1)
            {
                auto requestBrightness = m_interface->RequestMImSetBrightness(0x00);
                m_logger.LogInfo() <<"request brightness 0";
                lmp::mode::SoaMImMoodeMode type =  lmp::mode::SoaMImMoodeMode::kCOMPORT_MOOD;
                auto requestMood = m_interface->RequestMImSetMode(type);
            
                auto requestColor = m_interface->RequestMImSetRGBColor(3u);
            }
	    }
        else
        {
            m_logger.LogVerbose() << "No";
        }

        StartFlag_Prev = vStartFlag;
        FinishFlag_Prev = vFinishFlag;

	    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace batterymonitor
 
/// EOF