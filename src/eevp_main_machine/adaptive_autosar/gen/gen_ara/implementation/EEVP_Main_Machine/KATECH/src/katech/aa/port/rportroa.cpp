///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportroa.cpp
/// SOFTWARE COMPONENT NAME           : RPortRoa
/// GENERATED DATE                    : 2025-07-18 17:10:32
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "katech/aa/port/rportroa.h"
 
namespace katech
{
namespace aa
{
namespace port
{
 
RPortRoa::RPortRoa()
    : m_logger(ara::log::CreateLogger("KATC", "PORT", ara::log::LogLevel::kInfo))
    , m_running{false}
    , m_found{false}
    , m_receiversoaRoaDetectCount{nullptr}
    , m_receiversoaRoaDetectState{nullptr}
    , m_receiversoaRoaDeviceNormal{nullptr}
    , m_receiversoaRoaMode{nullptr}
    , m_receiversoaRoaRunningState{nullptr}
    , m_receiversoaRoaSensorError{nullptr}
    , m_receiversoaRoaSwVersion{nullptr}
{
}
 
RPortRoa::~RPortRoa()
{
}
 
void RPortRoa::Start()
{
    m_logger.LogInfo() << "RPortRoa::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"KATECH/AA/RPortRoa"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaRoaProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaRoaProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogInfo() << "RPortRoa::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortRoa::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortRoa::Terminate()
{
    m_logger.LogInfo() << "RPortRoa::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribesoaRoaDetectCount();
        StopSubscribesoaRoaDetectState();
        StopSubscribesoaRoaDeviceNormal();
        StopSubscribesoaRoaMode();
        StopSubscribesoaRoaRunningState();
        StopSubscribesoaRoaSensorError();
        StopSubscribesoaRoaSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogInfo() << "RPortRoa::Terminate::StopFindService";
    }
}
 
void RPortRoa::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaRoaProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogInfo() << "RPortRoa::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogInfo() << "RPortRoa::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogInfo() << "RPortRoa::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogInfo() << "RPortRoa::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_unique<eevp::control::proxy::SoaRoaProxy>(handles[0]);
        m_findHandle = std::make_unique<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribesoaRoaDetectCount();
        SubscribesoaRoaDetectState();
        SubscribesoaRoaDeviceNormal();
        SubscribesoaRoaMode();
        SubscribesoaRoaRunningState();
        SubscribesoaRoaSensorError();
        SubscribesoaRoaSwVersion();
    }
}
 
void RPortRoa::SubscribesoaRoaDetectCount()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaDetectCount();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDetectCount.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::SubscribesoaRoaDetectCount::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::SubscribesoaRoaDetectCount::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaDetectCount()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDetectCount.Unsubscribe();
        m_logger.LogInfo() << "RPortRoa::StopSubscribesoaRoaDetectCount::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaDetectCount()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDetectCountTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaDetectCount.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::RegistReceiversoaRoaDetectCount::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::RegistReceiversoaRoaDetectCount::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDetectCountTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaDetectCount.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectCount.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaDetectCount(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDetectCountCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaDetectCount.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectCount.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaDetectCount(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaDetectCount::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaDetectCount(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDetectCount::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaDetectCount)
    {
        m_receiversoaRoaDetectCount(value);
    }
}
 
void RPortRoa::RegistFieldHandlersoaRoaDetectCount(std::function<void(const eevp::control::proxy::fields::soaRoaDetectCount::FieldType&)> handler)
{
    m_receiversoaRoaDetectCount = handler;
}
 
void RPortRoa::GetsoaRoaDetectCount()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaDetectCount.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::GetsoaRoaDetectCount::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaDetectCount)
            {
                m_receiversoaRoaDetectCount(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortRoa::GetsoaRoaDetectCount::" << response.Error().Message();
        }
    }
}
 
void RPortRoa::SubscribesoaRoaDetectState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaDetectState();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDetectState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::SubscribesoaRoaDetectState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::SubscribesoaRoaDetectState::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaDetectState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDetectState.Unsubscribe();
        m_logger.LogInfo() << "RPortRoa::StopSubscribesoaRoaDetectState::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaDetectState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDetectStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaDetectState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::RegistReceiversoaRoaDetectState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::RegistReceiversoaRoaDetectState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDetectStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaDetectState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectState.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaDetectState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDetectStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaDetectState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDetectState.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaDetectState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaDetectState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaDetectState(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDetectState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaDetectState)
    {
        m_receiversoaRoaDetectState(value);
    }
}
 
void RPortRoa::RegistFieldHandlersoaRoaDetectState(std::function<void(const eevp::control::proxy::fields::soaRoaDetectState::FieldType&)> handler)
{
    m_receiversoaRoaDetectState = handler;
}
 
void RPortRoa::GetsoaRoaDetectState()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaDetectState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::GetsoaRoaDetectState::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaDetectState)
            {
                m_receiversoaRoaDetectState(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortRoa::GetsoaRoaDetectState::" << response.Error().Message();
        }
    }
}
 
void RPortRoa::SubscribesoaRoaDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::SubscribesoaRoaDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::SubscribesoaRoaDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaDeviceNormal.Unsubscribe();
        m_logger.LogInfo() << "RPortRoa::StopSubscribesoaRoaDeviceNormal::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::RegistReceiversoaRoaDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::RegistReceiversoaRoaDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaDeviceNormal)
    {
        m_receiversoaRoaDeviceNormal(value);
    }
}
 
void RPortRoa::RegistFieldHandlersoaRoaDeviceNormal(std::function<void(const eevp::control::proxy::fields::soaRoaDeviceNormal::FieldType&)> handler)
{
    m_receiversoaRoaDeviceNormal = handler;
}
 
void RPortRoa::GetsoaRoaDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::GetsoaRoaDeviceNormal::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaDeviceNormal)
            {
                m_receiversoaRoaDeviceNormal(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortRoa::GetsoaRoaDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortRoa::SubscribesoaRoaMode()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaMode();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaMode.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::SubscribesoaRoaMode::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::SubscribesoaRoaMode::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaMode()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaMode.Unsubscribe();
        m_logger.LogInfo() << "RPortRoa::StopSubscribesoaRoaMode::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaMode()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaModeTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaMode.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::RegistReceiversoaRoaMode::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::RegistReceiversoaRoaMode::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaModeTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaMode.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaMode.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaMode(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaModeCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaMode.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaMode.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaMode(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaMode::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaMode(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaMode::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaMode)
    {
        m_receiversoaRoaMode(value);
    }
}
 
void RPortRoa::RegistFieldHandlersoaRoaMode(std::function<void(const eevp::control::proxy::fields::soaRoaMode::FieldType&)> handler)
{
    m_receiversoaRoaMode = handler;
}
 
void RPortRoa::GetsoaRoaMode()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaMode.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::GetsoaRoaMode::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaMode)
            {
                m_receiversoaRoaMode(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortRoa::GetsoaRoaMode::" << response.Error().Message();
        }
    }
}
 
void RPortRoa::SubscribesoaRoaRunningState()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaRunningState();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaRunningState.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::SubscribesoaRoaRunningState::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::SubscribesoaRoaRunningState::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaRunningState()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaRunningState.Unsubscribe();
        m_logger.LogInfo() << "RPortRoa::StopSubscribesoaRoaRunningState::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaRunningState()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaRunningStateTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaRunningState.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::RegistReceiversoaRoaRunningState::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::RegistReceiversoaRoaRunningState::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaRunningStateTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaRunningState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaRunningState.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaRunningState(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaRunningStateCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaRunningState.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaRunningState.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaRunningState(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaRunningState::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaRunningState(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaRunningState::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaRunningState)
    {
        m_receiversoaRoaRunningState(value);
    }
}
 
void RPortRoa::RegistFieldHandlersoaRoaRunningState(std::function<void(const eevp::control::proxy::fields::soaRoaRunningState::FieldType&)> handler)
{
    m_receiversoaRoaRunningState = handler;
}
 
void RPortRoa::GetsoaRoaRunningState()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaRunningState.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::GetsoaRoaRunningState::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaRunningState)
            {
                m_receiversoaRoaRunningState(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortRoa::GetsoaRoaRunningState::" << response.Error().Message();
        }
    }
}
 
void RPortRoa::SubscribesoaRoaSensorError()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaSensorError();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaSensorError.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::SubscribesoaRoaSensorError::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::SubscribesoaRoaSensorError::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaSensorError()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaSensorError.Unsubscribe();
        m_logger.LogInfo() << "RPortRoa::StopSubscribesoaRoaSensorError::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaSensorError()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaSensorErrorTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaSensorError.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::RegistReceiversoaRoaSensorError::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::RegistReceiversoaRoaSensorError::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaSensorErrorTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaSensorError.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSensorError.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaSensorError(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaSensorErrorCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaSensorError.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSensorError.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaSensorError(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaSensorError::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaSensorError(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaSensorError::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaSensorError)
    {
        m_receiversoaRoaSensorError(value);
    }
}
 
void RPortRoa::RegistFieldHandlersoaRoaSensorError(std::function<void(const eevp::control::proxy::fields::soaRoaSensorError::FieldType&)> handler)
{
    m_receiversoaRoaSensorError = handler;
}
 
void RPortRoa::GetsoaRoaSensorError()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaSensorError.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::GetsoaRoaSensorError::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaSensorError)
            {
                m_receiversoaRoaSensorError(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortRoa::GetsoaRoaSensorError::" << response.Error().Message();
        }
    }
}
 
void RPortRoa::SubscribesoaRoaSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // RegistReceiversoaRoaSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaRoaSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::SubscribesoaRoaSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::SubscribesoaRoaSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortRoa::StopSubscribesoaRoaSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaRoaSwVersion.Unsubscribe();
        m_logger.LogInfo() << "RPortRoa::StopSubscribesoaRoaSwVersion::Unsubscribed";
    }
}
 
void RPortRoa::RegistReceiversoaRoaSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaRoaSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaRoaSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::RegistReceiversoaRoaSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortRoa::RegistReceiversoaRoaSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_interface->soaRoaSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortRoa::ReadValuesoaRoaSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortRoa::ReceiveFieldsoaRoaSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        
        if (m_found)
        {
            if (m_interface->soaRoaSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaRoaSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortRoa::ReadValuesoaRoaSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogInfo() << "RPortRoa::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortRoa::ReceiveFieldsoaRoaSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortRoa::ReadValuesoaRoaSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaRoaSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    if (m_receiversoaRoaSwVersion)
    {
        m_receiversoaRoaSwVersion(value);
    }
}
 
void RPortRoa::RegistFieldHandlersoaRoaSwVersion(std::function<void(const eevp::control::proxy::fields::soaRoaSwVersion::FieldType&)> handler)
{
    m_receiversoaRoaSwVersion = handler;
}
 
void RPortRoa::GetsoaRoaSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaRoaSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogInfo() << "RPortRoa::GetsoaRoaSwVersion::Responded";
            
            auto result = response.Value();
            if (m_receiversoaRoaSwVersion)
            {
                m_receiversoaRoaSwVersion(result);
            }
        }
        else
        {
            m_logger.LogError() << "RPortRoa::GetsoaRoaSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortRoa::RequestResetRoaDetectInfo()
{
    if (m_found)
    {
        m_interface->ResetRoaDetectInfo();
    }
}
 
void RPortRoa::RequestSetRoaMode(const eevp::control::SoaRoaMode& mode)
{
    if (m_found)
    {
        m_interface->SetRoaMode(mode);
    }
}
 
void RPortRoa::RequestStartRoa()
{
    if (m_found)
    {
        m_interface->StartRoa();
    }
}
 
void RPortRoa::RequestStopRoa()
{
    if (m_found)
    {
        m_interface->StopRoa();
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace katech
 
/// EOF